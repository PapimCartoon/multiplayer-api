<!--
	The flash should get in "flashvars" the following parameters:
	(all URL-Parameters are written in: RoomLogicBase.URL_PARAM_*)
	- WaitForParameters: a flag passed by the DistributionSWF (that passes the config_url in a function call)
	- skin_url: the url of the graphics SWF (we can't put it in the XML because Yotam's graphics must load it in the beginning)
	- config_url: the url of this config XML 
	- error_report_url: the url of a page to which the graphics may post errors 
		(we POST to that page with these parametes - bug_id, errMessage, url, traces)
		Again, we can't put it in the XML because the XML itself might have problems!
		Note that we may also submit an image of the flash (printscreen) to that url.
		(you can also set JPG_QUALITY of SendMultipartImage)

	- override_*  - to override values in the XML
	- reflection_*  - to override static vars in the flash (e.g., come2play_as3.util.General.isDoingTrace=true)
	

	The javascript should have the following functions:
		openJavaScriptPopup(type:String, url:String, windowTarget:String, windowParam:String)
		flashPlayerInfo(is_debugger:Boolean, capabilities:String)
		autoMatchCompleted(inMilliseconds:int, playerIds:Array/*int*/, stakes:String)
	For flashPlayerInfo:
		see flash documentation for: Capabilities.serverString
	For openJavaScriptPopup:
		If the javascript doesn't have openJavaScriptPopup, then the flash opens the url by itself using navigateToURL
		<type> is either:
		"start_game_from_invite_url" (url parameters: room_id, player_ids)
		"start_game_from_table_url" (url parameters: table_id, room_id, server_urls, player_ids, stake, view_password, play_password)
		"user_statistics_url" (url parameters: user_id)
		"save_to_favorite_url" (url parameters: match_id)
	For autoMatchCompleted:
		Note that when you auto-match 3 players, 
		then 2 players will wait some seconds,
		and the last player will immediately be matched (so inMilliseconds will be less than 100) 
		
	In the online XML you don't need to put any
		**attributes**, like children_type="...",  type="...", user_id="int", etc.
	The flash already processed those meta-instructions and created AS3 classes
		that process the XML accordingly.
	You will get detailed runtime errors if there are errors in the XML.
		
	About attributes in config:
		instead of writing everytime:
		 <user_id type="int">...</user_id>
		you can write in one place:
		 user_id="int"

About md5:
You always start your md5 with:
MD5( SECRET + 
	'x' + config.extra_args.user_id + 
	'x' + config.extra_args.issued_on + 
	... ) 
Note that we always have a seperator of 'x' between fields.
We use md5 in 4 places:
•	room_md5 - can you enter a room?
•	saved_match - can you start the saved match? (here we do not use user_id and issued_on becuase the md5 must be identical for all players)
•	extra_args - can you connect to the server?
•	red5_connect_params - can you connect to red5, and with what permissions?
•	user_info_md5 - sensitive user_info (such as rating, tokens, user_name, etc) 

Room info:	
•	room_id: the identity of the room.
	test room_ids should be between 1-100
•	room_name: the name of the room.
•	cur_users: how many users are currently connected to this room
•	max_users: what's the maximum number of users allowed to be connected at once for this room.
•	open_in_seconds: The number of seconds until the room is opened (negative means the room is opened).
•	close_in_seconds: The number of seconds until the room is closed (negative means the room is already closed).
	Using 0 for open_in_seconds and close_in_seconds means the room is opened forever.
•	all_java_ips: list of IP addresses , ports, protocols of alternative JAVA servers.
	The first element will be tried first, than the second, etc.
•	room_md5:Security check for the JAVA
	room_md5 is:
	MD5( SECRET + 
		'x' + config.extra_args.user_id + 
		'x' + config.extra_args.issued_on + 
	    'x' + room_id + 
	    'x' + max_users + 
	    'x' + open_in_seconds + 
	    'x' + close_in_seconds + 
	    'x' + game_kind + 
	    'x' + game_name)

User info (in <user_info>, <UnknownUserTemplate> and in other places):
<params> is converted to XML_params.
Java parses the following fields: supervisor, credibility, tokens
All the fields should be url-encoded, except the above fields 
	(it matters only for **tokens** becuase doing url-encode for supervisor or credibility doesn't change anything).
We do this encoding because the MD5 must be done on standard ASCII characters (and the "name" always caused us problems).
(The Java needs to know the tokens of each user so we can do a MOCK for got_all_player_match_end - without using a real DB and WEB-API) 


Not used by the graphics yet (but should be displayed):
•	opening_date: That date that this room was opened on.
•	closing_date: That date that this room will be closed.
•	open_status: 1=about to open, 2=open,3=about to close,4= full, 5=close		 
  -->
<root	
	custom="list"
	reflection="list"
	i18n="list"
	value="xml"
	
	xml="xml"
	user_id="int"
	room_id="int"
	default_room_id="int"		
	cur_users="int"
	max_users="int"
	open_in_seconds="int"
	close_in_seconds="int"
	open_status="int"
	game_kind="EnumGameKind"
	
	is_male="boolean"
	is_veteran_user="boolean"
	is_guest="boolean"
	site_name="string"
	supervisor="EnumSupervisor"
	credibility="int"
	tokens="Stake"
	votes_sum="int"
	votes_count="int"
	game_rating="int"	
	min_delay_milliseconds="int"
	saved_player_ids="int_array"
	player_ids="int_array"
	>
<!--
	The XML has two parts:
	- customInitInfo
		for initializing i18n and custom info.
		Only after this stage, we load all the enums 
		(like EnumMessage that uses i18n)
		Note that the container has one customInitInfo, and the game has another customInitInfo.
	- config
		can use any class.
		reflection is applied after all classes where initialized.
-->
<customInitInfo>
	<custom>
		<!-- 
			Saved games for testing are stored in the xml as customInfo with keys like this:
			LOCALTEST_GAMENAME-VARIANT-PLAYERSNUM-EnumPlayType
			LOCALTEST_(game_parameters.game_room.game_name)-(game_parameters.extra_match_info)-(config_xml.players_number)-(game_parameters.play_type)
			VARIANT is for OldBoard games.
			For example:
			LOCALTEST_Beatles-10_4-2-MultiPlayer
		 -->
		
		
		
		
		<entry><key>disableGameRating</key><value>true</value></entry>		
		<entry><key>disableStatisticsPage</key><value>true</value></entry>	
		
		<entry><key>isSmartAutoMatch</key><value>true</value></entry>		
		<entry><key>isSendErrorImage</key><value>false</value></entry>		 
		<entry><key>LOCALTEST_Beatles-10_4-1-MultiPlayer</key><value>'364d5a22fa5ed4855d880b7592e6a7c8c7758a96fce44fd390a26dade3afc358abb6234e7ab86b70781ac76ab30eb4b9b32a9253925f6914f2667e3656907fc8642890aaa3e2a49e1a437e70c40d7637cd8a36fa4004c6bec2c1bea6c4915a9a19141b41239ea47656e2422eaaa136ba31310afa04e0139f153a79aef8258e1eeea903bd3a9d0966d9ccba706dc5a716c54472f192642f6170c32e2485cb4488df75f01ae9d7c6046706e1b0ac6d9ba0652e3142152120fd3aa854b5b6883a541131591a27d9c15db13e8232ccc4f8e0652e3142152120fd0d813fcae91c0c8115739d0d9de1a80fa25783a6467072aae7cdc1dd7013902f29aeb9a89fe955b6fdde40b8f0dca1f51526f6643ca3c051f25ba344d634a952cf9d89cf7f946fa78de12836484877e7e86011601f1de6f99b1c53e6f0aa70090ca1f83ced83ba54e3bd60a0ceefbcf3a6399e05c01d814c69fa4ebec5f37fa3741cd0affe33f23d6005f6e0234c9b7eb36f63777dbc3b687abb22ce3b85aabf9a63ab87bb41826860fd8632208790b22c1a6d8414859e31946ce61b1b57eb57677c737f5f786e422aff07c6f6d2404e24946d30455420edcc39d97ff1468a348ea3dddd7b78adc787b6a8a51441ef9c5a27222a1d5bd29b'</value></entry>
		<entry><key>LOCALTEST_MineSweeperAS3--1-MultiPlayer</key><value>''</value></entry>
				
		<entry><key>block_user_ids</key><value>[]</value></entry>
		<entry><key>DebugSendReport</key><value>false</value></entry>
		<entry><key>RunUnitTests</key><value>false</value></entry>
		<entry><key>MaxTablesInGraphic</key><value>2</value></entry>
		<entry><key>moreGames</key><value>[["http://www.authorstream.com/Content/Belly-13348-Nice-pics-slides-slide-music-audio-pictures-5575-Entertainment-ppt-powerpoint-118_88.jpg","http://www.authorstream.com/Content/Belly-13348-Nice-pics-slides-slide-music-audio-pictures-5575-Entertainment-ppt-powerpoint-118_88.jpg"]]</value></entry>
		<!--
		<entry><key>popoutUrl</key><value>"file:///X:/come2play/API_GoogleCodeSVN/gameOnlineTester/room.html?flash_type=game&type=AutoMatch&match_string=dogs&room_id=999&isYoavContainer=false&isDefaultroomXML=true&isDefaultgameXML=true&PlayersNumSim=1&AutoMatch=true&MinPlayersNum=2&MaxPlayersNum=2&PlayersNum=2&boardHeight=400&boardWidth=400&gameStageX=100&gameStageY=0&gameSwf=..%2FAS3%2FSWFs%2FMinesweeperAS3.swf%3F&swfWidth=500&swfHeight=570&roomXML=XML%2Fconfig2.xml&gameXML=XML%2Fconfig2.xml&isVeteran=false&isMale=false&isGuest=false&credibility=39&votes_sum=2957&votes_count=216&avatar=&GameRating=1964&tokens=0%3A277%2C1%3A241&supervisor=Supervisor&name=%C3%97%C2%A9%C3%97%E2%80%94%C3%97%C2%A7%C3%97%C5%B8&id=810174&serverTable_0=chatType&chatType=FIXED&serverTable_1=isWithTables&isWithTables=true&gameTable_0=Board%20Width&Board%20Width=12&gameTable_1=Mine%20Amount&Mine%20Amount=20"</value></entry>
		<entry><key>disableSiteName</key><value>true</value></entry>
		
		-->
		
		
		
		
		<entry><key>rewardFolderURL</key><value>"graphics/rewards/"</value></entry>
		<entry><key>rewardFolderURL</key><value>"graphics/rewards/"</value></entry>
		<entry><key>tokenFolderURL</key><value>"graphics/rewards/"</value></entry>
		<entry><key>noUserPic</key><value>"images/noOne.png"</value></entry>
		<entry><key>tokenSet</key><value>[[0,"0.swf"],[1,"1.swf"],[5,"5.swf"],[10,"10.swf"],[50,"50.swf"],[100,"100.swf"],[500,"500.swf"],[1000,"1000.swf"],["x","x.swf"]]</value></entry>
		<entry><key>ratings</key><value>[0,1200,1400,1600,1800,2000,2200,2400]</value></entry>
		
		<entry><key>rewardPageLink</key><value>"www.google.com/aaa.asp?"</value></entry>
		
		<entry><key>banned_words_regexp</key><value>"&#102;uck|suck|ass"</value></entry>
		
		<!-- when doing local testing, I don't want popups, or msgs when I press Control		
		<entry><key>enablePopUps</key><value>false</value></entry>
		 -->
		<entry><key>EnablePressedControlMsg</key><value>false</value></entry>

		<entry><key>minimizedChatSize</key><value>10</value></entry>
		<entry><key>minimizableHeader</key><value>true</value></entry>
		<entry><key>grabIt</key><value>"http://www.facebook.com"</value></entry>
		<entry><key>do_alternate_start_turn</key><value>true</value></entry>
		
		<entry><key>user_statistics_url_PARAMS</key><value>"width=200,height=200"</value></entry>
		
		<entry><key>inviteBuddyLink</key><value>"http://www.google.com"</value></entry>
		
		
		<!--
		<entry><key>computerImage</key><value>"images/Avatar_1.gif"</value></entry>
		<entry><key>isGameScalable</key><value>true</value></entry>
		<entry><key>force_board_height</key><value>100</value></entry>
		<entry><key>force_board_width</key><value>100</value></entry>
		
		
		
		Local:  localhost:2000:socket,localhost:2000:old_xmlsocket,localhost:8083:rtmpt
		Java44 (for game-developer testing without ASP): 74.63.37.40:8080:socket,74.63.37.40:8080:old_xmlsocket,74.63.37.40:80:rtmpt
		Java238 (for game-developer testing without ASP): 80.179.46.238:8080:socket,80.179.46.238:8080:old_xmlsocket,80.179.46.238:80:rtmpt
		Java43 (for testing with ASP): 74.63.37.41:8080:socket,74.63.37.41:8080:old_xmlsocket,74.63.37.41:80:rtmpt
		
		<entry><key>override all_java_ips</key><value>'80.179.46.238:80:rtmpt'</value></entry>

		To test the weird PROXY some users have (that returns HTTP/1.1 400)
		use the following (with Red5 turned on):
		localhost:8083:socket,localhost:2000:socket
		
		-->		
		<entry><key>override all_java_ips</key><value>'localhost:2000:socket,localhost:2000:old_xmlsocket,localhost:8083:rtmpt'</value></entry>
		
		
		<!--
		<entry><key>testThrow in timeout</key><value>true</value></entry>
		<entry><key>EndGameDelay</key><value>10</value></entry>
		
		<entry><key>ARTIFICIAL_TO_JAVA_DELAY</key><value>'700-8000'</value></entry>
		<entry><key>ARTIFICIAL_FROM_JAVA_DELAY</key><value>'700-8000'</value></entry>
		<entry><key>ARTIFICIAL_TO_JAVA_DELAY</key><value>'500-1000'</value></entry>
		<entry><key>ARTIFICIAL_FROM_JAVA_DELAY</key><value>'500-1000'</value></entry>
		 -->
		
		
		<!--
		chatType can be FIXED,DYNAMIC_OPEN,DYNAMIC_CLOSED,NO_CHAT_WITH_USERS_LIST or NO_CHAT
		 -->
		<entry><key>chatType</key><value>"NO_CHAT_WITH_USERS_LIST"</value></entry>
		<!--
		logoUrl - url where end game logo is placed
		logoLink - url clicking the logo will lead
		-->
		<entry><key>logoLink</key><value>'http://www.google.com'</value></entry>
		<entry><key>Send font</key><value>'<font size="16">$text$</font>'</value></entry>
		<entry><key>DebugMultipleMessages</key><value>false</value></entry>
		<!--causes the framework to show a waiting screen  -->
		<entry><key>StartUp_3_WaitingForOpponents tags</key><value>'<custom>SHOW_AD</custom>'</value></entry>
		<entry><key>adType</key><value>'MochiAd'</value></entry>
		<!--
		MochiAd
		cpmStar
		gameJacket
		-->
		<entry><key>isWithTables</key><value>true</value></entry>
		<!--
		TurnBased
		NO_TIMER
		-->
		<entry><key>TimerType</key><value>'TurnBased'</value></entry>
		<!--
		tableStyle - tells the room which view to use as default
		BOX - for box view
		LINE - for line view
		-->
		<entry><key>tableStyle</key><value>"LINE"</value></entry>

		<entry><key>MochiCode</key><value>'53c06abe662b2907'</value></entry>
		<entry><key>CPMStarSubPoolID</key><value>1</value></entry>
		<entry><key>CPMStarPoolID</key><value>1910</value></entry>
		
		<entry><key>MessageButton_Back To Main_color</key><value>"0x9DC641"</value></entry>
		<entry><key>MessageButton_Play Alone_color</key><value>"0xDD1D67"</value></entry>
	</custom>
		<!--
		Stuff that will need to be translated:
			taunts.taunt.title
			room_name
			all i18n strings
			-->
	<i18n>
		<entry><key>Close</key><value>סגור</value></entry>
	</i18n>
	<reflection>
		<!-- 
			I use reflection to modify **public** static variables in the flash.
			You can also pass "reflection_1=..." in the flashvars/url to achieve the same purpose
			(it is better to pass them in the url if you want to do modifications before the XML loads) 
			Examples: come2play_as3.room::RoomLogic.LOCALHOST_all_java_ips
			
			If you want to test the error report mechanism:
			<entry><key>come2play_as3.network::ServerConnection.error_report_url</key><value>'http://www.come2play.com/shared/flex_object/error_report.asp'</value></entry>
		-->
		<entry><key>come2play_as3.network::MySocket.USE_HEX</key><value>false</value></entry>
		
		
				<entry><key>come2play_as3.auto_copied::StaticFunctions.SHOULD_CALL_TRACE</key><value>false</value></entry>
		<!-- for efficiency we avoid traces in the online version 
		<entry><key>come2play_as3.auto_copied::LocalConnectionUser.DO_TRACE</key><value>false</value></entry>

		-->
	</reflection>
</customInitInfo>
<config>
	<openJavaScriptPopup>
		<start_game_from_invite_url>index.html?</start_game_from_invite_url>
		<start_game_from_table_url>index.html?</start_game_from_table_url>
		<user_statistics_url>index.html?</user_statistics_url>
		<!-- The user has to wait (using AJAX) until the JAVA sends the match_id to the ASP -->
		<save_to_favorite_url type="optional">index.html?</save_to_favorite_url>
	</openJavaScriptPopup>
	
	<!-- 
		For unkown users, e.g., in a game that was saved and some players have disconnected. 
		We first search in players_info to see if we have that user_id.
		If not, we use UnknownUserTemplate. 
	-->
	<UnknownUserTemplate>
		<params>
			  <is_male>true</is_male>
			  <is_veteran_user>false</is_veteran_user>
			  <is_guest>true</is_guest>
			  <site_name>facebook</site_name>
			  <name>Unknown #user_id#</name>
			  <avatar_url>../images/Avatar_4.gif</avatar_url>
			  <supervisor>NormalUser</supervisor>
			  <credibility>0</credibility>
			  <tokens>0:100:</tokens>
			  <votes_sum>0</votes_sum>
			  <votes_count>0</votes_count>	
			  <game_rating>1500</game_rating>		  
		</params>
	</UnknownUserTemplate>
	
	<stage_frameRate type="int">18</stage_frameRate>
	<!-- flash_type: room, game --> 
	<flash_type type="EnumFlashType">room</flash_type>
	
	<!-- 
		In game: For OldBoard it is either 1 or 2. In API games it can be any positive number.
		In room: you open tables where the number of players in the table is @players_number 
		
		An API game may be started by any number of players 
			between @min_player_number and @max_player_number.
		E.g., TicTcToe must have at least 2 players, while MineSweeper can have 1 player.
		@players_number decides how many players should join a game till it starts
		The game can decide to end the match if some players disconnect.
		When we get to the last player, we give him the option to:
			win/cancel/save (in the future, we can add viewers to the game)
		
		After the game is over, if there are less than @min_player_number players,
			then we do not give the option to start a new game (see LessThan_min_player_number).
		We take at most @max_player_number users from those currently online 
			(given priority to those that played before, according to the order that they connected).
	-->
	<players_number type="int">2</players_number>
	<min_player_number type="int">1</min_player_number>
	<max_player_number type="int">2</max_player_number>
		
	<game_parameters type="optional">		
		<!--
		Start-Game common scenarios (see EnumGameStartScenario):
		These are the highlevel scenarios: 
		Scenarios that connect to room (to create or update the table object):
		Each scenario has a corresponding XML element: FromTable, AutoMatch, SentInvitation
		  1) FromTable: Players sat in a table and opened the game window.
		  2) AutoMatch: the player wish the system to automatically match him with an opponent (e.g., in iGoogle).
		  3) SentInvitation: when you wish to play against a specific person. 
		   The target of the invitation can either be in a room or connected to some IM (instant-messenger) account.
		   The sender of the invitation can either be in a room, or he can send the invitation via google-map or from his friends list.
		   
		SinglePlayer scenarios must start with NoTable.
		(note that play_type might be MultiPlayer, and still you can have just one player, and thus start_scenario can be NoTable) 
		If play_type is not MultiPlayer (for Favorite match and TurnBased), 
			then you must have load_saved_match and players_info.
		(if you want to start a new TurnBased game, then pass in load_saved_match: saved_match_id=-1, and match_state='')
		
		I now list all possible single-user scenarios:
		- Single player game: (e.g., play sudoku by yourself, or play both sides in a chess game)
		  set play_type=MultiPlayer with players_number=1 (and table_id=0)
		- Favorite match: (Viewing a favorite match that was previously saved.)
		  make sure you have the load_saved_match and players_info elements.
		  set play_type=ReviewMatch 		
	    - TurnBased game: some games can be played in turns (e.g., Chess or TicTacToe, but not Sudoku-War).
	      In such games, the player that currently has the turn can connect, make its turn, and the match is saved.
	      set play_type to TurnBased, and pass  element. 
	      Element  can be empty if you start a new game.
		-->
		<start_scenario type="EnumGameStartScenario">AutoMatch</start_scenario>
		
		
		<play_type type="EnumPlayType">MultiPlayer</play_type>
	
		<!--						
		For old API boards, you use the OldContainer and add the board name as a parameter 'oldgame'.
				
Old board:	

These are the 9 old games (Make sure you changed game_name to the correct game):
Reversi Sudoku BackGammon Beatles Blob Checkers Chess Connect4 Go
Not supported anymore: FindWord, Simon, Puzzle

extra_match_info depends on the game.
1) Sudoku: 9_Easy  9_Normal 9_Hard 9_Extreme
2) Checkers: Israeli International   Israeli_randomX70
3) BackGammon: Original tapa Nackgammon
4) Go: 9_5  9_6 13_5 13_6 19_5 19_6    9_5_randomX70
5) Chess: Original Chess256, Chess960, Chess960x2, ShuffleChess, CornerChess    Dice Extintion Atomic ThreeChecks    Dice_ThreeChecks_ShuffleChess_randomX70
6) Reversi: Original randomX70
7) Beatles: 10_3 10_4
8) Blob: Original randomX70
9) Connect4: Original randomX70

Explanation about  _randomX70 :
It means that 70% of the possible moves are kept (30% of the squares are eliminated at random)
randomX__ can be added to almost every game to create randomness.

Explanation about Chess:
- Opening types:   Chess256, Chess960, Chess960x2, ShuffleChess, CornerChess
- different rules:   Dice, Extintion, Atomic, ThreeChecks

	
Chess with dice: (set extra_match_info to "Dice")
../../as2_old_boards/OldBoardContainer.swf?oldboard_swf=../../as2_old_boards/boards/Chess_board.swf&game_type=Chess&
Chess without dice: set extra_match_info to "")
../../as2_old_boards/OldBoardContainer.swf?oldboard_swf=../../as2_old_boards/boards/Chess_board.swf&game_type=Chess&do_roll_dice_is_visible=false&do_automatic_roll_is_visible=false&
BackGammon:
../../as2_old_boards/OldBoardContainer.swf?oldboard_swf=../../as2_old_boards/boards/BackGammon_board.swf&game_type=BackGammon&

For OldBoard, you can set these variables (by default, they are all set to 'true'):
4 buttons:
  do_back,do_forward,do_cancel,do_roll_dice
5 checkboxes:
  do_automatic_roll,do_chess_3D_or_2D,do_make_move_animations,do_make_dice_animations,do_make_animations_on_forward
Each one can be:
	*_is_visible (if it is 'false' then we set _visible=false)
	*_is_on (for checkboxes only. determines if the initial position is on or off)
For example: &do_cancel_is_visible=false&  or do_make_animations_on_forward_is_on=false&
		-->		
		<board_swf_url>../../../API_GoogleCodeSVN/AS3/SWFs/MinesweeperAS3.swf?</board_swf_url>
		<gameStageX type="int">200</gameStageX>
		<gameStageY type="int">100</gameStageY>
		<board_height type="int">250</board_height>
		<board_width type="int">250</board_width>
		
		<!--
			prefix_local_connection_id can be either 
			"usingAS3" - for AS3 games (instead of using LocalConnection we use direct method calls)
			a number - for AS2 games
		-->
		<prefix_local_connection_id type="string">usingAS3</prefix_local_connection_id>
		
		<!-- logoFullUrl is a logo in a SWF or JPEG file of size 70x70 pixels -->
		<logoFullUrl>../images/logoFullUrl.jpg</logoFullUrl>	
			<!-- 
				CustomInfo for GameAPI:
				Pass here custom variables for each game.
				The variables are set in JSON, e.g.,				
			  	<customSymbolsStringArray>[null, "../../../API_GoogleCodeSVN/Emulator/camel70x70.PNG"]</customSymbolsStringArray>
				
				I also pass	other variables, see  
				API_Message.CUSTOM_INFO_KEY_*
				e.g., 
				CONTAINER_logoFullUrl
				CONTAINER_secondsPerMatch 
				CONTAINER_secondsPerMove
				CONTAINER_gameStageX
				CONTAINER_gameStageY
				CONTAINER_gameHeight (board_height)
				CONTAINER_gameWidth  (board_width)
				CONTAINER_gameFrameRate (stage_frameRate)
				
				<entry><key></key><value></value></entry>
			  -->	
		<customInitInfo>
			<custom>
				<entry><key>CONTAINER_checkThrowingAnError</key><value>false</value></entry>
			</custom>
			<i18n>			
				<entry><key>Container sent a message before getting doRegisterOnServer</key><value>'באג בקונטיינר ששלח הודעה לפני שהמשחק נרשם'</value></entry>
			</i18n>
			<reflection>
				<entry><key>come2play_as3.api.auto_copied::StaticFunctions.MAX_TRACES_NUM</key><value>100</value></entry>
				<entry><key>come2play_as3.api.auto_copied::StaticFunctions.SHOULD_CALL_TRACE</key><value>false</value></entry>
				<!-- for efficiency we avoid traces in the online version 
				<entry><key>come2play_as3.api.auto_copied::LocalConnectionUser.DO_TRACE</key><value>false</value></entry>
				
				-->
			</reflection>		
		</customInitInfo>
			
		<!--
			IMPORTANT: 
			MD5 for saved match doesn't use
				config.extra_args.user_id 
				config.extra_args.issued_on
			because the MD5 must be identical for all players
			since in the agreement we assert that the message is identical. 
			MD5( SECRET +   
			'x' + saved_match_id + 
			'x' + match_state + 
			'x' + saved_player_ids.join(',') ) 
		-->
		<load_saved_match type="optional">
			<saved_match_id type="int">242</saved_match_id>
			<match_state></match_state>
			<saved_player_ids>1,2</saved_player_ids>
			<saved_match_md5>alltembels</saved_match_md5>
		</load_saved_match> 
		
		<!-- when reviewing a game we can set herer the initial auto_jump speed.
			If it is 0, then the user needs to manually move forward (no auto jump).
			If it is 1, then the game is reviewed in realtime speed,
			if it is 2, then the speed is doubled, etc.
		-->
		<review_auto_jump_initial_speed type="int">0</review_auto_jump_initial_speed>
		
		<!-- in Sudoku and Match4, 
			we use seconds_per_move to limit the time for the entire match 
		-->
		<seconds_per_move type="int">300</seconds_per_move>
		<seconds_per_match type="int">0</seconds_per_match>
		<!-- extra_match_info is for 
					**OldBoard** games.
			example: 
				Chess960_randomX90
		-->
		<extra_match_info></extra_match_info>
		
		<!-- 
			For API games (not OldBoard):
			Match history is used to implement back and forward.
			If you set is_with_match_state_history=false, then:
				- You cannot go back and forward.
				- You cannot review a match (favorite match).
			-->
		<is_with_match_state_history type="boolean">true</is_with_match_state_history>
		
		<!--
		can_rollback_state determines if the players can roll-back moves 
			(i.e., decide to go back a certain number of moves)
			
		Applicable in 
			OldBoard (in Turn-based games)
			and ClientBoard (when keeping history).
			
		Turn-based OldBoard games:
			Go,
		    Reversi,
		    Chess,
		    Checkers,
		    Connect4,
		    Blob,
		    BackGammon,	
		    -->	   
		<can_rollback_state type="boolean">true</can_rollback_state>
			
		<!-- 
			For TurnBased and ReviewMatch, we need to pass the players info.
			Also, if you load a saved game, you should write her the info of the players that already finished playing.
			E.g., a game of 5 players of poker, and 2 players disconnected, and the other 3 players save the game.
			When it is loaded, the info for the two players should be in players_info.
			
			Note that in FromTable.player_ids we pass the player user_id's, 
			so players_info is here to pass player info for cases that the player is not connected.
			No need to pass params for my user (because they appear in user_info.params below) 
		-->
		<players_info type="optional,list">
		  <player>
		  	<user_id>999</user_id>
			<params>
			  	  <is_male>true</is_male>
			  	  <is_veteran_user>false</is_veteran_user>
			  	  <is_guest>false</is_guest>
			  	  <site_name>facebook</site_name>
				  <name>Yoav</name>
				  <avatar_url>../images/Avatar_2.gif</avatar_url>
				  <supervisor>Supervisor</supervisor>
				  <credibility>100</credibility>
				  <tokens>0:4000</tokens>
				  <votes_sum>9</votes_sum>
				  <votes_count>54</votes_count>		
		    	  <!-- config.game_name is prefixed to the rating, e.g., game_rating_chess . I do this to make sure the ratings of different games don't override one another -->
				  <game_rating>2010</game_rating>		    
			</params>
		  </player>
		</players_info>
		
		<FromTable type="optional">
			<!-- table_id can be -1 for a viewer, and then the viewer will get all tables and wait until it finds a table with the given player_ids -->
			<table_id type="int">-1</table_id>			
			
			<!-- 
				view and play password are given by the java server to users that connected to the RoomAPI.
				If we wish to match to users without using the room functionality,
				then the ASP can calculate the passwords directly like this:
				MD5( SECRET + (isView?"VIEW":"PLAY")+"x"+room_id+"x"+table_id )
			-->		
			<view_password>alltembels</view_password>
			<play_password>alltembels</play_password>
			<!-- the order of players is important: the first one is white, the second is black -->
			<player_ids>26,71</player_ids>
			<stakes type="Stake">0:10</stakes>			
		</FromTable>
		
		<!-- 
			For AutoMatch we create a new table
			and match people that have the exact same match_string 
			The maximum number of users in the table is players_number
		-->
		<AutoMatch type="optional">
			<match_string>dogs</match_string>
		</AutoMatch>

		<SentInvitation type="optional">
			<player_ids>26,71</player_ids>
			<!-- initial stakes of the game -->
			<stakes type="Stake">0</stakes>			
		</SentInvitation>
		
		<game_room type="XML_room">
			<room_id>7468</room_id>
			<all_java_ips></all_java_ips> 		
			<room_name>Chess room</room_name> 
			<cur_users>-1</cur_users>
			<max_users>20</max_users> 
			<open_in_seconds>0</open_in_seconds>
			<close_in_seconds>0</close_in_seconds>
			<game_kind>ClientBoard</game_kind>
			<game_name>Chess</game_name>
			<room_md5>alltembels</room_md5>	
			<opening_date>01/02/2004</opening_date>
			<closing_date>01/04/2010</closing_date>
			<open_status>2</open_status>
		</game_room>
	</game_parameters>
	
	<room_parameters type="optional">
		<refresh_url>XML/come2play_rooms.xml</refresh_url>
		<!-- 
			If you pass rooms here (as item elements), 
			then it will save the first call to refresh_url.
			In some cases, we only need one room, 
			so it is more efficient	to inline the room here. Then you don't need to give refresh_url.
		--> 		
		<rooms type="list"> 
			<room>
				<room_id>999</room_id>
				<all_java_ips></all_java_ips> 		
				<room_name>Chess room</room_name> 
				<cur_users>5</cur_users> 
				<max_users>20</max_users> 
				<open_in_seconds>0</open_in_seconds>
				<close_in_seconds>0</close_in_seconds>
				<game_kind>ClientBoard</game_kind>
				<game_name>Chess</game_name>	
				<room_md5>alltembels</room_md5>
				
				<opening_date>01/02/2004</opening_date>
				<closing_date>01/04/2010</closing_date>
				<open_status>2</open_status>
			</room>
			<room>
				<room_id>2</room_id> 
				<all_java_ips></all_java_ips> 	
				<room_name>BackGammon room</room_name> 
				<cur_users>1</cur_users> 
				<max_users>20</max_users> 
				<open_in_seconds>0</open_in_seconds>
				<close_in_seconds>0</close_in_seconds>
				<game_kind>ClientBoard</game_kind>
				<game_name>BackGammon</game_name>				
				<room_md5>alltembels</room_md5> 
				
				<opening_date>01/02/2004</opening_date>
				<closing_date>01/04/2010</closing_date>
				<open_status>2</open_status>
			</room>
			<room>
				<room_id>3</room_id> 
				<all_java_ips></all_java_ips> 	
				<room_name>Connect4 room</room_name> 
				<cur_users>1</cur_users> 
				<max_users>20</max_users> 
				<open_in_seconds>0</open_in_seconds>
				<close_in_seconds>0</close_in_seconds>
				<game_kind>ClientBoard</game_kind>
				<game_name>Connect4</game_name>				
				<room_md5>alltembels</room_md5> 
				
				<opening_date>01/02/2004</opening_date>
				<closing_date>01/04/2010</closing_date>
				<open_status>2</open_status>
			</room>
		</rooms>
	</room_parameters>

	<extra_args>
	  <!-- test users are between 1-100 -->
	  <user_id>26</user_id>
	  
	  <!-- when did the ASP signed the md5?
	 	The difference, measured in minutes, between
        the current time and midnight, January 1, 1970 UTC.
        In ASP:
        # h - Hour
		# n - Minute
		# s - Second 
        DateDiff(n,"1/1/1970",Now())
        
        The java will make sure it was issued_on in the past 2 days.
        -->	  
	  <issued_on type="int">0</issued_on> 
	  
	  <!-- 
		For reconnecting if the TCP connection was closed:
		A user attempts to reconnect only if @can_reconnect_after_seconds 
			passed since the connection started.
		The user then has @wait_before_close_seconds to reconnect.
		Pros: Automatically reconnects
		Cons: if you really close the window (and an unloadEvent wasn't sent to the server), the other users will 
			still see that you are connected for @wait_before_close_seconds.
		I suggest @can_reconnect_after_seconds=60 (so if a user disconnects before a minute passed, then he can't reconnect)
		About @wait_before_close_seconds: I would suggest 15 seconds.
		It can be more than 30 seconds because of other timers for doAll messages (to find hackers)
		
		If any of these two parameters is less than or **equal** to 0, then you **cannot** reconnect. 
	     -->
	  <can_reconnect_after_seconds type="int">1</can_reconnect_after_seconds> 
	  <wait_before_close_seconds type="int">10</wait_before_close_seconds> 
	  <!-- md5 is:	  
		MD5( SECRET + 
		'x' + config.extra_args.user_id + 
		'x' + config.extra_args.issued_on +
		'x' + can_reconnect_after_seconds +
		'x' + wait_before_close_seconds)
	     -->
	  <md5>alltembels</md5> 
	</extra_args>
	<user_info>
	  <params><!-- parameters for my user -->
		  <is_male>true</is_male>
		  <is_veteran_user>false</is_veteran_user>
		  <is_guest>false</is_guest>
		  <site_name>facebook</site_name>
		  <name>Yoav</name>
		  <!-- 
		  - avatar examples:
			  http://msn.come2play.com/shared/avatars/1001664.jpg
			  http://msn.come2play.com/shared/avatars/1001834.jpg
			  http://msn.come2play.com/shared/avatars/1006809.jpg
		  - tokens
		  	is the number of tokens and rewards.
		  	The format is: 	
		  		ID:QUANTITY_NUM:DESCRIPTION,ID:QUANTITY_NUM:DESCRIPTION,... 
		  	The ID and DESCRIPTION can be any string without ':' or ','.
		  	For example:
		  		0:100,2:20:name=viking+hat&imageURL=...&value=50,3:30
		  		this means that the user has 100 elements of id=0 (e.g., 100 tokens in league 0)
		  		and 20 elements of id=2 (with a description that creates RewardInfo),
		  		and 30 elements of id=3
		  -->
		  <avatar_url>images/Avatar_1.gif</avatar_url>
		  <!-- to change my supervisor status: Admin, Supervisor, MiniSupervisor, NormalUser -->
		  <supervisor>NormalUser</supervisor>
		  <credibility>100</credibility>
		  <tokens>0:5000</tokens>
		  <votes_sum>9</votes_sum>
		  <votes_count>54</votes_count>
    	  <!-- I add config.game_name to the rating, e.g., game_rating_chess . 
    	  	I do this to make sure the ratings of different games don't override one another -->
		  <game_rating>2010</game_rating>		  
	  </params>
	  <!-- user_info_md5 is:
	  	MD5( SECRET + 
		'x' + config.extra_args.user_id + 
		'x' + config.extra_args.issued_on + 
		'x' + key1 + 'x' + user_data1 + 
		'x' + key2 + 'x' + user_data2 + 
		...)
	     where the order of key1, key2, ... is 
	     the order in <params>
	     
		 IMPORTANT: remember that I change  game_rating  to  game_rating_chess
		 		So your md5 should use 'game_rating_chess'.
		 		 
	     In the example above:
	      key1='is_male', user_data1='true'
	      key2=name, user_data2='Yoav'
	     -->
	  <user_info_md5>alltembels</user_info_md5>
	</user_info>
	
    <!-- league_stage_id determines the tokens in this stage  -->
    <league_stage_id type="string">0</league_stage_id>
    <!-- config.game_name is prefixed to the rating, e.g., game_rating_chess . I do this to make sure the ratings of different games don't override one another -->
    <game_name>chess</game_name>
		
	<is_with_taunts type="boolean">true</is_with_taunts> <!--  show the taunt pop up -->
	<is_with_stakes type="boolean">true</is_with_stakes>
		
	<taunts type="list">
		<taunt> 
			<title>Taunt 1</title>
			<mp3_url>../taunts/1.mp3</mp3_url>
		</taunt>
		<taunt> 
			<title>Taunt 2</title>
			<mp3_url>../taunts/2.mp3</mp3_url>
		</taunt>
		<taunt> 
			<title>Taunt 3</title>
			<mp3_url>../taunts/3.mp3</mp3_url>
		</taunt>
	</taunts>	
	<emoticons type="list">
		<emoticon> 
			<string>&lt;3</string>
			<url>emoticon1.swf</url>
		</emoticon>
		<emoticon> 
			<string>\m/</string>
			<url>emoticon3.swf</url>
		</emoticon>
		<emoticon> 
			<string>:-o</string>
			<url>emoticon4.swf</url>
		</emoticon>
		<emoticon> 
			<string>:D</string>
			<url>emoticon5.swf</url>
		</emoticon>
		<emoticon> 
			<string>:(</string>
			<url>emoticon6.swf</url>
		</emoticon>
		<emoticon> 
			<string>x-(</string>
			<url>emoticon7.swf</url>
		</emoticon>
		<emoticon> 
			<string>B-)</string>
			<url>emoticon8.swf</url>
		</emoticon>
		<emoticon> 
			<string>:"(</string>
			<url>emoticon9.swf</url>
		</emoticon>
		<emoticon> 
			<string>=D</string>
			<url>emoticon10.swf</url>
		</emoticon>
		<emoticon> 
			<string>;)</string>
			<url>emoticon11.swf</url>
		</emoticon>
		<!--
		
		Yotam - Emoticons where defined in the design and are linked to clip exported into
		the resulting swf. There can only be as many nodes as there are emoticons and they need to follow
		this pattern:
		
		node 0: will connect to a symbol called Emoticon1FLA - so in this case "emoticon1"
		node 1: will connect to a symbol called Emoticon2FLA ... and so on.
		
		width and height are redundant and in this implementation and so is url.
		
		If you wish to load the emoticons they need to be exported in a very particular way
		we can discuss this further.
		-->
	</emoticons>
		
	<!-- 
	You can copy and paste the traces starting with "MSG XXX traces:",
	and copy the array here.
	It will test all these messages in the beginning of the flash.
	For example:	
	--> 
	<testMessages type="xml">
	[
	]
	</testMessages>
	
	<graphics>	
		<red5_connect_params>
			<!-- md5 is:	  
				MD5( SECRET + 
				'x' + config.extra_args.user_id + 
				'x' + config.extra_args.issued_on +
				'x' + permissions ) 
			Permissions for Red5 is a url-encoded string that
				describes regular expressions on the file name:
				play - what files can you play
				for publishing you have 3 options: record, append, live
				for sharedObject you have 5 options: soCreation, soConnection, soWrite, soDelete, soSend 
			If you didn't write an option, that it is not permitted for usage.
			Example:
				play=.*&live=34_.*&record=Game_34_42&append=foo|bar
				You can play/subscribe to anything, 
				publish-live any file that starts with '34_',
				publish-record only file 'Game_34_42',
				publish-append only files 'foo' or 'bar',
				and you can't use any SharedObject because soCreation was not given. 
				-->
			<red5_urls>rtmp://80.179.46.236/games,rtmpt://80.179.46.236/games</red5_urls>
			<permissions>play=.*&amp;live=.*</permissions>
			<md5>alltembels</md5> 
		</red5_connect_params>
		
		<!-- YOTAM'S ADDITIONS START HERE-->
		<!--
		site_id : the identity of the site
		site_lang: 2 chars language code
		-->
		<site_id type="int">1</site_id>
		<site_lang>it</site_lang>
    
	
		<table_refresh_interval_ms type="int">30000</table_refresh_interval_ms>
		
		
		
		<!--
			rating values - these are used to determine which star to show next to the user icon etc.
			According to Erez there are 7 possible values. if you add a value here you will need to add it
			in the .fla as well.
			Level1 ::    0 - 999
			Level2 :: 1000 - 1999
		-->	
		<!--
			chat properties
		-->
		<chat>
			<total_chat_height type="int">200</total_chat_height>
			<chat_output_height type="int">145</chat_output_height> 	<!-- there has to be at least 55 px difference -->
			<user_list_width type="int">150</user_list_width>
			
			<max_content_height type="int">1000</max_content_height>   <!-- this makes sure the actual graphics that is
																				   the chat output won't be big enough to affect
																				   performance -->
			
			<max_chars_in_inputfield type="int">300</max_chars_in_inputfield> 	<!-- 0 is for unlimited -->
			<chat_line_leading type="int">7</chat_line_leading> 	<!-- this parameter sets the leading for messages that have
															 emoticons, so if you change their size, you might want
															 to adjust this as well -->
			<emoticon_spacer type="int">3</emoticon_spacer>    	<!-- this parameter sets space that is created in the textfield
															 of the chat output to make room for emoticons.
															 if you change the size of the emoticons, or font for the chat
															 output, you want to adjust this as well -->
															 
			<emoticon_spacer_color type="uint">0xFFFFFF</emoticon_spacer_color>
			<line_color_invitation type="uint">0xFF0000</line_color_invitation>
			<line_color_private_message type="uint">0x82AA3C</line_color_private_message>
			<line_color_taunt type="uint">0xFB8F84</line_color_taunt>
		</chat>
		
		<user_info_pref>
			<private_chat_selected_color type="uint">0x82AA3C</private_chat_selected_color> <!-- color of the highlight -->
			<blocked_selected_color type="uint">0xCB2565</blocked_selected_color> 			<!-- color of the highlight -->
		</user_info_pref>
    
		<default_room_id>-1</default_room_id>
		
		<is_show_viewers type="boolean">true</is_show_viewers>
			
		<is_chat_enabled type="boolean">true</is_chat_enabled>

		
		<language>
			<is_rtl type="boolean">false</is_rtl>
			<is_with_emoticons type="boolean">false</is_with_emoticons>
		</language>
		
		<!-- ads -->
		<is_show_ad type="boolean">false</is_show_ad>
		<inline_ad_url>../graphics/ad_stub.swf</inline_ad_url>
		
		<framework>
			<waiting_screen>
				<waiting_game_url type="string"></waiting_game_url>
			</waiting_screen>
			
			<ads>
				<is_show_pre_add type="boolean">false</is_show_pre_add>
				<is_show_post_add type="boolean">true</is_show_post_add>
			</ads>
			
			<ui>
				<is_hide_avatar_in_chat_list type="boolean">false</is_hide_avatar_in_chat_list>
				<is_align_vertical type="boolean">false</is_align_vertical>
				<is_with_emoticons type="boolean">true</is_with_emoticons>
			</ui>
			
		</framework>
    
	</graphics>
</config>
</root>
