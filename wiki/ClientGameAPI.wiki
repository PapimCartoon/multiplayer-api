#summary A multiplayer API using only client-side code

The communication between your game and our server is done by writing a class that extends `ClientGameAPI.as`, and instantiating one instance of your class.

The functions in `ClientGameAPI` can be divided into two categories: Operations and Callbacks.
Operations are functions starting with `do_`
{{{
do_register_on_server()
do_store_trace(function_name:String, argument:Object)
do_agree_on_match_over(user_ids:Array/*int*/, scores:Array/*int*/, pot_percentages:Array/*int*/)
do_start_my_turn()
do_end_my_turn(next_turn_of_player_ids:Array/*int*/)
do_client_protocol_error_with_description(error_description:String)
do_store_match_state(key:String, value:Object)
do_send_message(to_user_ids:Array/*int*/, value:Object)
do_set_timer(key:String, in_seconds:int, pass_back:Object)
}}}
Callbacks are functions starting with `got_`
{{{
got_error(in_function_name:String, err:Error)
got_general_info(keys:Array/*String*/, values:Array/*Object*/)   
got_user_info(user_id:int, keys:Array/*String*/, values:Array/*Object*/)  
got_my_user_id(my_user_id:int) 
got_match_started(user_ids:Array/*int*/, extra_match_info:Object, match_started_time:int)
got_match_over(user_ids:Array/*int*/)
got_start_turn_of(user_id:int)
got_end_turn_of(user_id:int)  
got_stored_match_state(user_ids:Array/*int*/, keys:Array/*String*/, values:Array/*Object*/)
got_message(user_id:int, value:Object)
got_timer(from_user_id:int, key:String, in_seconds:int, pass_back:Object)  
}}}

Operations are functions that your _game_ may call,
and callbacks are functions that the _container_ may call on your game.
Your class may override some of the callbacks and respond appropriately to them; it is not mandatory to override _all_ the callbacks.

=== High level description of the functions === 

|| *Function* || *Description* ||
|| [do_register_on_server] || Call it after your _game_ finished loading ||
|| [do_store_trace] || Call it to store traces to help you debug your application in the emulator and online ||
|| [got_general_info] || Called to pass general info, e.g., url of a logo for branding your game ||
|| [got_user_info] || Called to pass user specific info, e.g., user name or avatar ||
|| [got_my_user_id] || Called to pass your user_id ||
|| [got_match_started] || Called when a match starts ||
|| [do_agree_on_match_over] || Call it to end the match. The match will be over when all players called it ||
|| [got_match_over] || Called when the match is over ||
|| [do_store_match_state] || Call it to store/update/delete you match state ||
|| [do_store_match_state got_stored_match_state] || Called when a user changed the match state ||
|| [do_send_message] || Call it to send a message to a given set of users ||
|| [do_send_message got_message] || Called when a user get a message ||
|| [do_set_timer] || Call it to set a timer on the server (similar to `setTimeout` in AS) ||
|| [do_set_timer got_timer] || Called on all users when when the timer ticks/expires ||
|| [do_start_my_turn] || For Turn-based games. Call it to start your turn ||
|| [do_start_my_turn got_start_turn_of] || Called to acknowledge you have the turn ||
|| [do_start_my_turn do_end_my_turn] || Call it to end your turn, and set who may play next ||
|| [do_start_my_turn got_end_turn_of] || Called to acknowledge your turn ended ||
|| [got_error] || Called when one of the callbacks threw an error ||
|| [do_client_protocol_error_with_description] || Call it when you have to cancel the game due to an unrecoverable error ||

Read here about [Match_state_vs_messages Match state vs Sending messages].


=== Viewers and players === 
The set of connected users is partitioned into players and viewers.
Viewers may not call all the operations and might have special restrictions when calling an operation.
New players cannot join an existing match; players may only leave the match (either by disconnecting or losing/winning the match).
When a player leaves the match he becomes a viewer.

The following operations may only be called by players (not by viewers):
{{{
do_agree_on_match_over
do_start_my_turn
do_end_my_turn
do_client_protocol_error_with_description
}}}

A viewer may call:
{{{
do_send_message
do_set_timer
do_store_trace
do_store_match_state
}}}
(Note that `do_store_match_state` have special limitations on viewers to prevent a viewer tempering with the match state.)

=== Serialization ===
This remark is relevant to functions with parameters of type `Object` or `Array/*Object*/`.
Objects are serialized when sent to the server, and therefore must contain only standard types: `Array`, `int`, `Number` (double-precision), `Boolean`, or `String`.
Important note: an `Array` may not contain anything except the above standard types.
You may not pass any other classes.

=== Spamming the server ===
To avoid overloading the server, you can send at most 10 operations every second.
The message size should generally be smaller than 1KB (and must always be smaller than 10KB!).

=== Saved matches ===
The users may agree to save their match, and may decide to load it later.
A saved match contains the following information:
  * the game name (in the emulator we use the SWF name as the identifier for the game)
  * match state (user ids, keys, values)
  * ids of current players and the ids of players that already ended the match
  * who has the current turn (a single user_id), or which users can have the next turn (next_turn_of_player_ids). 
Note that the current timers are not saved, and should be restarted after the match is loaded.

When a saved match is loaded, the game gets the following callbacks:
 * `got_match_started`
 * `got_match_over` for those users that are no longer playing
 * `got_stored_match_state` with the match state
 * `got_start_turn_of` if there is a single player that currently has the turn, or if `next_turn_of_player_ids` is of size 1