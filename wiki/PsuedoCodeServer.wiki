#summary pseudo code representation of the server
{{{
#this function gets all the calls made by the user game application

gotUserMessage(user:User,msg:API_Message)
if msg is (API_DoTrace or API_DoRegisterOnServer or API_DoAllFoundHacker) then
  processMessage(user, msg);
else if API_DoFinishedCallback {
  <unverifiedUsers, oldMsg> = the first object in unverifiedQueue, from head to tail, that the user has not verified yet
  remove user from unverifiedUsers
  if unverifiedUsers is empty {
    remove head of unverifiedQueue 
    processWaitingQueue()
  }
} else {
  add <user,msg> to waitingQueue
  processWaitingQueue()
}
 }}}   

{{{
# this function processes the waiting functions

processWaitingQueue()
if (waitingQueue is empty) return
<user,msg> = head of waitingQueue;
if (msg is API_DoStoreState) {
  remove head of waitingQueue 
else {
  if (unverifiedQueue is not empty) return
  if (not all users sent this message) return
  if (not all users sent this message before sending anything else){
    report error, concurrency problem
    return
  }
  if(not all users sent this message with the same parameters){
    report error, not all users used same values for do all function
    return
  }
  remove from waitingQueue all processed doAll messages 
}
if(msg is not API_DoAllSetTurn)
  add <allPlayers, msg> to unverifiedQueue 
processMessage(user,msg)
processWaitingQueue()
}}}