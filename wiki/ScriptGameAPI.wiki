#summary A multiplayer API using both client-side and server-side code

If security is critical in your game, then you should consider using ScriptGameAPI.
With server-side logic, you can guarantee that there is a central script the ensures that all players follow the same protocol.

Your game will have two components:
  * Server: In the server you include your server-side logic (in ASP, PHP, or any other scripting language)
  * Client: the client will run your game SWF.

These are the entities envolved:
  * Client: running the _game_ and _container_ SWFs, connected via [LocalConenction].
  * Server: connected with the _container_ over TCP (may use either XMLSocket, Socket, RTMP, or RTMPT).
  * Script: connected with the Server over HTTP.

ScriptGameAPI consists of two protocols:
  * [ScriptGameAPI_Server_Script Server-Script] communication over HTTP.
  * _game_ and _container_ communication, in a similar way to [ClientGameAPI]. The differences are described below.


ScriptGameAPI removed these functions from ClientGameAPI:
{{{
do_agree_on_match_over
do_start_my_turn
do_end_my_turn
do_client_protocol_error_with_description
}}}
and added these:
{{{
do_send_to_script(message:String)
got_from_script(type:String, from_player_id:user_id, message:String)
got_error_in_script_output(timed_out_url:Array/*String*/, url:String, url_output:String, url_output_headers:String, error_message:String)
}}}

=== High level description of the functions === 

|| *Function* || *Description* ||
|| [do_send_to_script] || Call it to send a message to the script ||
|| [got_from_script] || Called with the script output for your user ||
|| [got_error_in_script_output] || Called if the script returned illegal output ||