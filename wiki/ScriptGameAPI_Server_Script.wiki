#summary The communication protocol between the server and the script in ScriptGameAPI

This document describes the communication protocol between
  * the server (the gaming server), and
  * the script (the script you wrote with the server-side logic of your game)

=== GET or POST requests ===
Your script should handle GET requests of this form:
{{{
  ?milli_time_stamp=*&msg_type=*&...
}}}
The script should be stateless, because the server may send the request several times and/or to different URLs (if you defined several backup urls).

You have an option to use POST requests.
Prefer POST over GET only if your `old_game_state` is really long (and your IIS/Apache have a limitation on the length of GET requests).
GET requests are better for several reasons:
  * They are easier to debug (you can just copy&paste the url in your browser).
  * GET request can (and should) be cached by various agents; POST requests are usually not cached because they are intended for data manipulation.


The server must respond with either status:
{{{
HTTP/1.1 200 OK
HTTP/1.1 100 Continue
}}}

=== Script input ===
These are the possible message types (some messages have extra parameters): 
{{{
msg_type = new_game | load_game | made_move | keep_alive
new_game:  playing_user_ids
load_game: playing_user_ids, old_game_state
made_move: playing_user_ids, old_game_state, stakes, from_user_id, msg
}}}

`msg_type` has 4 possible values:
  * `new_game` to start a new game.
  * `load_game` to load an old game.
  * `made_move` to make a move by some player.
  * `keep_alive` to keep the TCP connection between the server and script alive.

`playing_user_ids` is an integer list of user ids, e.g., '23541,48254,122334'.
This list contains only the users that are currently playing, i.e., it doesn't contain users that already disconnected or quit the match.

Players can only disconnect during the match (new players cannot join; only viewers can join, but viewers cannot communicate with the script).
Note that the script is not notified when a user disconnects. 
If the script needs to know when a user disconnects, then other players can send the script a special message.

`old_game_state` is a string describing the game state. This string was returned in a previous script output (the script output is described below).

The players can bet on the outcome of the game. `stakes` is the amount in the current betting pot. The syntax of `stakes` is `id1:quantity1,id2:quantity2,...`, e.g., `1:100,2:30,9:59`.

`from_user_id` is the user_id that sent the message, and `msg` is the string that was passed in [do_send_to_script].

=== Script output ===
The output is different for each message type.
  * All message types should return the same `milli_time_stamp` the script got as input.
  * All messages, except `keep_alive`, should return `new_game_state`, `turn_of`, and may return any of the following: `msg_to_XXX`, `msg_to_viewer`, or `msg_to_all`.
  * `made_move` must also return `msg_to_new_viewer`, and may return `match_result_XXX`.

You should replace `XXX` with the user_id, e.g., if you want to send a message to `user_id=666` then the script should output `msg_to_666`.

Here is the explanation on each variable in the output:
  * `milli_time_stamp` is the same value that was passed in the input.
  * `new_game_state` is the state of the game after the message was processed (see `old_game_state` in the input).
  * `turn_of` is relevant in turn-based games. It sets a timer for a certain player, and when the timer expires than that player loses.
  * `msg_to_XXX` is a string to send only to user_id `XXX` (see [got_from_script]).
  * `msg_to_viewer` is a message to send to all viewers. 
  * `msg_to_player` is a message to send to all players.
  * `msg_to_all` is a message to send to all players and viewers.
  * `msg_to_new_viewer` is the first message to send to a future new viewer (that will start viewing the match). Note that `msg_to_viewer` is sent to existing viewers. 
  * `match_result_XXX` is the outcome of the match for user_id `XXX` (if the match is over for that user). The value of `match_result_XXX` is `<score>x<stake>`, where `<stake>` is either `ReturnStakes` (the stakes should be returned; useful in case of Tie/Draw), or `Win` (the user get the entire pot, i.e., all the stakes), or `%<percentage>` (e.g., `%30` means the user gets `%30` percents of the pot), or a specific stake (e.g., `1:70,2:30`. See the input parameter `stake`)




=== Keep alive ===
To make communication between the server and the script more efficient, 
the gaming server keeps the connection alive as long as an ongoing games exist.

Our server uses pipelining, i.e., several GET requests may be sent to the script even before the script sent its first response.
See http://www.mozilla.org/projects/netlib/http/pipelining-faq.html

Make sure your server supports "HTTP Keep-Alives".
In IIS 6.0, HTTP Keep-Alives are enabled by default, which complies with the HTTP/1.1 specification for HTTP Keep-Alives. 
IIS holds open an inactive connection for as long as the ConnectionTimeout metabase property specifies (the default value is 120 seconds).

To know how to seperate between the GET responses, we use this header:
{{{
Content-Length: ...
}}}
Therefore, make sure your script returns this header correctly by using buffering 
(i.e., your script should buffer its response, and send the response only when it is complete.)
It is done as follows in various scripting languages:
{{{
ASP: Response.Buffer = true
ASP.Net: Page.Response.BufferOutput = true
PHP: ob_start()
JSP: <%@ page autoFlush="false" buffer="50kb" ... %>    Make sure your buffer is big enough (otherwise, an exception will be raised when the buffer overflows)
Python, Perl: plug in a StringIO instance on sys.stdout, or use cgi_buffer.py
}}}

=== Stateless ===
Note that the script should be stateless.
E.g., in ASP, you should not use (or disable) session, cookies or application.
If you want to be absolutely sure that you script does not use cookies, you can disable cookies completely.
You can disable cookies in IIS like this:
{{{
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters\AllowSessionState
}}}


=== Character encoding ===
The default encoding that our server assumes is ISO-8859-1
(HTTP 1.1 says that the default charset is ISO-8859-1)
Because the entire output is url-encoded, the encoding doesn't matter.
However, in case of errors, your script might produce illegal output that is not url-encoded,
and you should make sure the encoding is ISO-8859-1, i.e., make sure you have the header:
Content-Type: text/html; charset=ISO-8859-1
This can be done in this way:
{{{
Java Servlets: resource.setContentType ("text/html;charset=ISO-8859-1");
JSP: <%@ page contentType="text/html; charset=ISO-8859-1" %>
ASP and ASP.Net: <%@ Language="VBScript" codepage=1252 %><%Response.charset="ISO-8859-1"%>
PHP: header('Content-type: text/html; charset=ISO-8859-1');
Perl and Python: print "Content-Type: text/html; charset=ISO-8859-1\n\n"
}}}

=== Authentication ===
The gaming server add an `md5` signature to every GET request, so your script can verify that a certain request came from the server.
The parameter `md5` is equal to:
{{{
MD5( md5_secret + milli_time_stamp )
}}}
The `md5_secret` is different for each game, and can be found online in the [Come2Play] website; it is a secret shared between the server and the script.
Remember that the script is stateless, and therefore imposters cannot cause any harm 
except wasting the script time and perhaps causing a denial-of-service attack.

For example, for TicTacToe in the url below:
{{{
TicTacToeGameLogic.asp?milli_time_stamp=1199367696671&...&md5=8cbe04852672a2210df30a87d6b3ef25
md5_secret = "mxgyhs5238fjhsrqofksy6er45p"
MD5("mxgyhs5238fjhsrqofksy6er45p1199367696671") = "8cbe04852672a2210df30a87d6b3ef25"
}}}

== Example of TicTacToe game ==
A move in TicTacToe occurs when a player selects a cell, e.g., the cell in row 0 and column 2, which is encoded as `0X2`.
The board is encoded as a string of length 9, each character describes the state of a cell: each cell can be Empty (`E`), White (`W`), or Black (`B`).
For example, this string "EEWBEEEEW" describes this board:
{{{
-------
| | |W|
-------
|B| | |
-------
| | |W|
-------
}}}
And the string "EEEEEEEEE" describes the empty board.

The state of a match in a *single-player* game is:
`<USER_ID>x<BOARD_STATE>`. (In a single-player TicTacToe game, a single player plays both white and black.)
For example, "55xEEEEEEEEE" represents a single-player match where the player is 55, and the board is empty. 

The state of a match in a *two-player* game is:
`<WHITE_USER_ID>x<BLACK_USER_ID>x<BOARD_STATE>`.
For example, "55x66xEEEEEEEEE" represents a match where the white player is 55, the black is 66, and the board is empty. 

For example, consider the following operations for the TicTacToe two-player game:
(on the Come2Play server the link is: http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp)

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55x66 Starting a new game]
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55x66
< turn_of=55&new_game_state=55x66xEEEEEEEEE&msg_to_all=55x66xEEEEEEEEE&msg_to_new_viewer=55x66xEEEEEEEEE&milli_time_stamp=123
}}}
The empty board is broadcasted to all players and viewers.
User 55 will have a timer of 100 seconds to complete his move.


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xEEWBEEEEW  Loading a saved game]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xEEWBEEEEW
< turn_of=66&new_game_state=55x66xEEWBEEEEW&msg_to_all=55x66xEEWBEEEEW&msg_to_new_viewer=55x66xEEWBEEEEW&milli_time_stamp=123
}}}

This saved game is broadcasted to all players and viewers.
User 66 will have a timer of 70 seconds to complete his move.


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xWWEWEEBBB Loading a saved game that already ended]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xWWEWEEBBB
< new_game_state=55x66xWWEWEEBBB&match_result_66=1xWIN&match_result_55=-1x0&msg_to_all=55x66xWWEWEEBBB&milli_time_stamp=123
}}}


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=1X2&old_game_state=55x66xEEWBEEEEW&stakes=10   Making a move, afterwhich the game is still in progress]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=1X2&old_game_state=55x66xEEWBEEEEW&stakes=10
< turn_of=55&new_game_state=55x66xEEWBEBEEW&msg_to_new_viewer=55x66xEEWBEBEEW&msg_to_55=1X2&msg_to_viewer=1X2&milli_time_stamp=123
}}}

The black chose the cell 1X2 , and this is the new game state:
{{{
-------
| | |W|
-------
|B| |B|
-------
| | |W|
-------
}}}
This move is sent to user 55 (white player) and any viewer.
A new viewer that might join the game in this stage will get this match state "55x66xEEWBEBEEW".
User 55 will have a timer of 60 seconds to complete his move.

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=55&msg=0X2&old_game_state=55x66xWBEWBBBWW&stakes=9  Making a move, afterwhich the game ends in tie]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=55&msg=0X2&old_game_state=55x66xWBEWBBBWW&stakes=9
< new_game_state=55x66xWBWWBBBWW&match_result_55=0xReturnStakes&match_result_66=0xReturnStakes&msg_to_66=0X2&msg_to_viewer=0X2&milli_time_stamp=123
}}}

The white chose the cell 0X2 , and this is the new game state:
{{{
-------
|W|B|W|
-------
|W|B|B|
-------
|B|W|W|
-------
}}}

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=2X2&old_game_state=55x66xWWEWEEBBE&stakes=9 Making a move, afterwhich the game ends in black winning]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=2X2&old_game_state=55x66xWWEWEEBBE&stakes=9
< new_game_state=55x66xWWEWEEBBB&match_result_66=1x9&match_result_55=-1x0&msg_to_55=2X2&msg_to_viewer=2X2&milli_time_stamp=123
}}}

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=keep_alive   Keeping the connection alive]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=keep_alive
< milli_time_stamp=123
}}}


For single-player TicTacToe:
{{{
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=55&old_game_state=55xEEWBEEEEW
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=55&old_game_state=55xWWEWEEBBB
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=1X2&old_game_state=55xEEWBEEEEW&stakes=10
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=0X2&old_game_state=55xWBEWBBBWW&stakes=9
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=2X2&old_game_state=55xWWEWEEBBE&stakes=9
}}}







=== Code of ServerSideLogic.asp ===
{{{
<%@ Language="VBScript" codepage=1252 %>
<% 
OPTION EXPLICIT
' The charset must be ISO-8859-1. Because the output is URL-encoded, the charset is not important (it's important only in error cases)
Response.charset="ISO-8859-1"

' VERY IMPORTANT: your script must buffer its output!
' There is no reason to send incomplete messages to the server,
' and more importantly, this makes sure the IIS adds the header "Content-Length: " to its response.
' (this header is critical when keeping the connection alive)
Response.Buffer = True

' About cache control:
' Between your Web server and a user requesting your page, there may be proxy servers configured to cache Web pages for faster response times.
' The default cache control is "Private"
' Private : A cache mechanism may cache this page in a Private cache and resend it only to a single client. This is the default value. Most proxy servers will not cache pages with this setting. 
Response.CacheControl = "Public" 'Public: Shared caches, such as proxy servers, will cache pages with this setting. The cached page can be sent to any user.
' Because the script is stateless, it is allowed to do caching
' If you are still making corrections in your code, and you want to disallow caching, 
' then uncomment the code below:
'Response.Expires = 60
'Response.Expiresabsolute = Now() - 1
'Response.AddHeader "pragma","no-cache"
'Response.AddHeader "cache-control","private"
'Response.CacheControl = "no-cache"
%>
<!--#include file="md5.asp" -->
<%

' MyResponse represents the result of new_game, load_game, or made_move in the game logic 
' (see an example in TicTacToeGameLogic.asp)
Class MyResponse 
    Private dic
    Private Sub Class_Initialize()
        Set dic = Server.CreateObject("Scripting.Dictionary")
    End Sub

    ' @user_id_of_current_turn is the user that has the turn
    ' It is relevant if the game is in progress. 
    ' It sets a timer for @user_id_of_current_turn
    ' If the timer expires, then player @user_id_of_current_turn will lose.
    ' If another message is passed to the server, then the timer is canceled.
    Public Sub add_turn_of(user_id_of_current_turn)
        dic.Add "turn_of", clng(user_id_of_current_turn)
    End Sub 
    ' The next state of the game
    Public Sub add_new_game_state(new_game_state)
        dic.Add "new_game_state", new_game_state
    End Sub 
    ' the server will send msg_to_all to all the players and viewers.
    Public Sub add_msg_to_all(msg_to_all)
        dic.Add "msg_to_all", msg_to_all
    End Sub 
    ' the server will send msg_to_viewer to all the viewers.
    Public Sub add_msg_to_viewer(msg_to_viewer)
        dic.Add "msg_to_viewer", msg_to_viewer
    End Sub 
    ' the server will send msg_to_player to all the players.
    Public Sub add_msg_to_player(msg_to_player)
        dic.Add "msg_to_player", msg_to_player
    End Sub 
    ' When a new viewer connects, the server will send him msg_to_new_viewer as the first message
    Public Sub add_msg_to_new_viewer(msg_to_new_viewer)
        dic.Add "msg_to_new_viewer", msg_to_new_viewer
    End Sub 
    ' When a new viewer connects, the server will send him msg_to_new_viewer as the first message
    ' stake can also be the string "ReturnStakes", in which case the server will return the stakes of that player (useful in case of a TIE).
    Public Sub add_match_result_(user_id, score, stake)
        dic.Add "match_result_"&user_id, clng(score)&"x"&stake
    End Sub 
    ' When a new viewer connects, the server will send him msg_to_new_viewer as the first message
    Public Sub add_msg_to_(user_id, msg)
        dic.Add "msg_to_"&user_id, msg
    End Sub 

    Public Function toString()
        Dim res, strItem
        res = ""
        For Each strItem In dic.Keys
            if dic(strItem)<>"" then res = res & strItem & "=" & Server.UrlEncode(dic(strItem)) & "&"
        Next
        toString = res
    End Function
End Class

' Helper functions
Function getArgument(arg_name)
    Dim arg
    arg = Request(arg_name)
    if arg="" then
        Response.Write "Missing "&arg_name&" in the query string!"
        Response.End
    end if
    getArgument = arg
End Function
Sub reportError(msg)
    Response.Write "Error report: "&msg
    Response.End
End Sub
' acceptOnlyRequestFromCome2play ends the script if the md5 parameter is not set correctly, i.e.,
' it makes sure the conenction came from the come2play server.
Sub acceptOnlyRequestFromCome2play
    Dim md5_value, is_come2play_server
    is_come2play_server = false
    md5_value = Request("md5")
    if md5_value<>"" then
        if md5(md5_secret & getArgument("milli_time_stamp") ) = md5_value then
            is_come2play_server = true
        end if
    end if
    if NOT is_come2play_server then
        Response.Write "Illegal md5 value!<br>"
        Response.End
    end if
End Sub

        
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' processRequest uses createLogic() to create some game logic,
' when including ServerSideLogic.asp you must define this function, which must return an object with these functions:
' 1) new_game(playing_user_ids)
' 2) load_game(playing_user_ids, old_game_state)
' 3) made_move(stakes, from_user_id, msg)
' All the operations return an instance of MyResponse (that includes the current state of the game)
Sub processRequest()
    Dim game_state, milli_time_stamp, msg_type, myResponse, game_logic, playing_user_ids
    
    ' Comment the line below if you're doing testing and you don't pass an MD5 value
    ' Uncomment the line below after finishing your testing, so your script will only process requests from come2play
    'call acceptOnlyRequestFromCome2play

    milli_time_stamp = getArgument("milli_time_stamp") 
    msg_type = getArgument("msg_type") 

    if msg_type="keep_alive" then
    elseif msg_type="new_game" OR msg_type="load_game" OR msg_type="made_move" then
        playing_user_ids = getArgument("playing_user_ids")
        set game_logic = createLogic()
        if msg_type="new_game" then
            set myResponse = game_logic.new_game(playing_user_ids)
        end if
        if msg_type="load_game" OR msg_type="made_move" then
            game_state = getArgument("old_game_state")
            set myResponse = game_logic.load_game(playing_user_ids, game_state)
        end if
        if msg_type="made_move" then
            set myResponse = game_logic.made_move(getArgument("stakes"), clng(getArgument("from_user_id")), getArgument("msg"))
        end if
        Response.Write myResponse.toString()

    else
        reportError "Illegal message type="&msg_type        
    end if
    Response.Write "milli_time_stamp="&milli_time_stamp
End Sub
%>
}}}













=== Code of TicTacToeGameLogic.asp ===
{{{
<!--#include file="ServerSideLogic.asp" -->
<%
' About MD5 and why it is needed:
' MD5 is a mathematical hashing function that is very difficult to reverse (i.e., requires a lot of computation).
' We use MD5 so your script can know that the request came from our Come2Play server
' (and not from some impostor).
' When you upload your game to our server using the Come2Play CMS, you will get an md5_secret for each game.
' You should replace that md5_scret with the string that appears below.
const md5_secret = "64D4B66FC996BCF7D7CA5AC27FECF586"

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' TicTacToeGameLogic class implements the server-side game-logic of TicTacToe 
'  according to the Come2Play ServerSide API.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function createLogic()
    Set createLogic = new TicTacToeGameLogic
End Function

' TicTacToe game, both for single-player and two-player (with multiple viewers)
Class TicTacToeGameLogic
    Private board(3,3) ' the board, each cell is either -1 (empty), 0 (white), or 1 (black)
    Private current_move_num ' the current move number (starts at 0 and increases up to at most 9)
    Private white_user_id 
    Private black_user_id ' In a single-player game, black_user_id=-1

    Private Sub Class_Initialize()
    End Sub

    Public Function new_game(playing_user_ids)
        set new_game = load_game(playing_user_ids, "")
    End Function

    Public Function load_game(playing_user_ids, old_game_state)
        Dim currentPos, c, row, col, res, board_state, index, result
        if old_game_state="" then
            old_game_state = playing_user_ids & "xEEEEEEEEE" ' empty board for these players
        end if

        ' The state of a match is:
        ' <WHITE_USER_ID>x<BLACK_USER_ID>x<BOARD_STATE>
        ' For example, "55x66xEEEEEEEEE" represents a match where the white player is 55, the black is 66, and the board is empty. 
        board_state = old_game_state
        index = INSTR(board_state, "x")
        assert index>0, "Illegal old_game_state"
        white_user_id = clng(LEFT(board_state, index-1))
        board_state = RIGHT(board_state, LEN(board_state)-index)
        index = INSTR(board_state, "x")
        if index>0 then
            black_user_id = clng(LEFT(board_state, index-1))
            board_state = RIGHT(board_state, LEN(board_state)-index)
        else
            black_user_id = -1
        end if
        assert playing_user_ids&"x-1"=(white_user_id&"x"&black_user_id) OR playing_user_ids=(white_user_id&"x"&black_user_id) OR playing_user_ids=(black_user_id&"x"&white_user_id), "Illegal playing_user_ids"

        currentPos = 0
        current_move_num = 0
        res = ""
        For row = 0 to 2
            For col = 0 to 2
                currentPos = currentPos + 1
                c = MID(board_state, currentPos, 1)
                board(row,col) = myIf(c="E", -1 , myIf(c="W", 0 , 1)) ' either Empty, White, or Black
                if c<>"E" then current_move_num = current_move_num+1 ' If not Empty then someone made a move.
            Next
        Next
        assert currentPos=LEN(board_state), "Illegal board_state"

        set result = get_result()
        result.add_msg_to_all old_game_state
        set load_game = result
    End Function

    Public Function made_move(stakes, from_user_id, msg)
        Dim row, col, result, opponent_user_id, from_color
        assert from_user_id=white_user_id OR from_user_id=black_user_id, "Illegal from_user_id"
        if black_user_id=-1 then 
            from_color = current_move_num MOD 2
        else
            from_color = 0
            if from_user_id=black_user_id then from_color = 1
            assert from_color=current_move_num MOD 2, "Message got from the wrong player"
        end if
        current_move_num = current_move_num + 1
        row = clng(MID(msg, 1, 1))
        col = clng(MID(msg, 3, 1))
        assert row>=0 and row<3, "Illegal message"
        assert col>=0 and col<3, "Illegal message"
        assert board(row,col) = -1, "The board position is already taken"
        board(row,col) = from_color
        
        set result = get_result()
        opponent_user_id = white_user_id+black_user_id-from_user_id
        if black_user_id<>-1 then result.add_msg_to_ opponent_user_id, msg
        result.add_msg_to_viewer msg

        set made_move = result
    End Function

    Private Function get_result()
        Dim res, new_game_state, winning_color
        set res = new MyResponse 
        new_game_state = save()
        res.add_new_game_state new_game_state 
        winning_color = isGameOver() 
        if winning_color<>-1 then
            if black_user_id=-1 then 
                res.add_match_result_ white_user_id, 1, "WIN" 
            else
                if winning_color=0 then
                    res.add_match_result_ white_user_id, 1, "WIN"
                    res.add_match_result_ black_user_id, -1, "0"
                else
                    res.add_match_result_ black_user_id, 1, "WIN"
                    res.add_match_result_ white_user_id, -1, "0"
                end if
            end if
        elseif current_move_num=9 then 'game ended in tie
            if black_user_id<>-1 then 
                res.add_match_result_ white_user_id,0, "ReturnStakes"
                res.add_match_result_ black_user_id,0, "ReturnStakes"
            else
                res.add_match_result_ white_user_id,0, "WIN"
            end if
        else        
            ' game in progress
            res.add_msg_to_new_viewer new_game_state 
            add_turn_of res
        end if

        set get_result = res
    End Function

    Private Sub assert(condition, msg)
        ' If you use cookies (though you should try to make the script stateless!), print them as well: " Request.Cookies="&Request.Cookies
        if Not condition then reportError "Request.QueryString="&Request.QueryString&" Request.Form="&Request.Form&" current_move_num="&current_move_num&" board="&save()&" msg="&msg
    End Sub
    Private Function myIf(condition, optionTrue, optionFalse)
        if condition then
            myIf = optionTrue
        else
            myIf = optionFalse
        end if
    End Function    
    Private Sub add_turn_of(res)
        Dim turnOfColor, user_id_of_current_turn
        ' The player who has the current turn is current_move_num mod 2 (when current_move_num is even it is the white player, otherwise it is the black player)
        turnOfColor = (current_move_num mod 2)
        user_id_of_current_turn = white_user_id
        if turnOfColor=1 AND black_user_id<>-1 then user_id_of_current_turn = black_user_id
        res.add_turn_of user_id_of_current_turn
    End Sub

    private Function save()
        Dim res, row, col, owner
        res = white_user_id & "x"
        if black_user_id<>-1 then res = res & black_user_id & "x" 
        For row = 0 to 2
            For col = 0 to 2
                owner = board(row,col)
                res = res & myIf(owner=-1, "E", myIf(owner=0, "W", "B")) ' either Empty, White, or Black
            Next
        Next
        save = res
    End Function

    ' checks if there is a winning row, column, or diagonal 
    ' returns -1 if no, 0 if white won, or 1 if black won
    Private Function isGameOver() 
        Dim k
        For k = 0 to 2
            if board(0,k)=board(1,k) AND board(0,k)=board(2,k) then 
                isGameOver = board(0,k)
                exit function
            end if
        Next
        For k = 0 to 2
            if board(k,0)=board(k,1) AND board(k,0)=board(k,2) then 
                isGameOver = board(k,0)
                exit function
            end if
        Next

        // diagonals
        if board(0,0)=board(1,1) AND board(0,0)=board(2,2) then 
            isGameOver = board(1,1)
            exit function
        end if
        if board(0,2)=board(1,1) AND board(2,0)=board(1,1) then 
            isGameOver = board(1,1)
            exit function
        end if
        
        isGameOver = -1
    End Function

    Public sub test()
        Dim res, stakes
        stakes = "5,l:3,tr:4"
        set res = gameLogic.load_game("66x55","55x66xEEWBEEEEW")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 66, "1X1")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 55, "1X2")
        Response.Write res.toString() & "<br>"
        
        set res = gameLogic.new_game("66x55")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 66, "1X1")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 55, "1X2")
        Response.Write res.toString() & "<br>"
        
        set res = gameLogic.load_game("55x66","55x66xWBWBBWEWE")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 66, "2X2")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 55, "2X0")
        Response.Write res.toString() & "<br>"
        set res = gameLogic.made_move(stakes, 66, "4X1") ' should fail with an error
        Response.Write res.toString() & "<br>"
    End sub
End Class

'Dim gameLogic
'set gameLogic = new TicTacToeGameLogic
'gameLogic.test

call processRequest
%>
}}}