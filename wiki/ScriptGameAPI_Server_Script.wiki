#summary The communication protocol between the server and the script in ScriptGameAPI

This document describes the communication protocol between
  * the server (the gaming server), and
  * the script (the script you wrote with the server-side logic of your game)

=== GET or POST requests ===
Your script should handle GET requests of this form:
{{{
  ?milli_time_stamp=*&msg_type=*&...
}}}
The script should be stateless, because the server may send the request several times and/or to different URLs (if you defined several backup urls).

You have an option to use POST requests.
Prefer POST over GET only if your `old_game_state` is really long (and your IIS/Apache have a limitation on the length of GET requests).
GET requests are better for several reasons:
  * They are easier to debug (you can just copy&paste the url in your browser).
  * GET request can (and should) be cached by various agents; POST requests are usually not cached because they are intended for data manipulation.


The server must respond with either status:
{{{
HTTP/1.1 200 OK
HTTP/1.1 100 Continue
}}}

=== Script input ===
These are the possible message types (some messages have extra parameters): 
{{{
msg_type = new_game | load_game | made_move | keep_alive
new_game:  playing_user_ids
load_game: playing_user_ids, old_game_state
made_move: playing_user_ids, old_game_state, stakes, from_user_id, msg
}}}

`msg_type` has 4 possible values:
  * `new_game` to start a new game.
  * `load_game` to load an old game.
  * `made_move` to make a move by some player.
  * `keep_alive` to keep the TCP connection between the server and script alive.

`playing_user_ids` is an integer list of user ids, e.g., '23541,48254,122334'.
This list contains only the users that are currently playing, i.e., it doesn't contain users that already disconnected or quit the match.

Players can only disconnect during the match (new players cannot join; only viewers can join, but viewers cannot communicate with the script).
Note that the script is not notified when a user disconnects. 
If the script needs to know when a user disconnects, then other players can send the script a special message.

`old_game_state` is a string describing the game state. This string was returned in a previous script output (the script output is described below).

The players can bet on the outcome of the game. `stakes` is the amount in the current betting pot. The syntax of `stakes` is `id1:quantity1,id2:quantity2,...`, e.g., `1:100,2:30,9:59`.

`from_user_id` is the user_id that sent the message, and `msg` is the string that was passed in [do_send_to_script].

=== Script output ===
The output is different for each message type.
  * All message types should return the same `milli_time_stamp` the script got as input.
  * All messages, except `keep_alive`, should return `new_game_state`, `turn_of`, and may return any of the following: `msg_to_XXX`, `msg_to_viewer`, or `msg_to_all`.
  * `made_move` must also return `msg_to_new_viewer`, and may return `match_result_XXX`.

You should replace `XXX` with the user_id, e.g., if you want to send a message to `user_id=666` then the script should output `msg_to_666`.

Here is the explanation on each variable in the output:
  * `milli_time_stamp` is the same value that was passed in the input.
  * `new_game_state` is the state of the game after the message was processed (see `old_game_state` in the input).
  * `turn_of` is relevant in turn-based games. It sets a timer for a certain player, and when the timer expires than that player loses.
  * `msg_to_XXX` is a string to send only to user_id `XXX` (see [got_from_script]).
  * `msg_to_viewer` is a message to send to all viewers. 
  * `msg_to_player` is a message to send to all players.
  * `msg_to_all` is a message to send to all players and viewers.
  * `msg_to_new_viewer` is the first message to send to a future new viewer (that will start viewing the match). Note that `msg_to_viewer` is sent to existing viewers. 
  * `match_result_XXX` is the outcome of the match for user_id `XXX` (if the match is over for that user). The value of `match_result_XXX` is `<score>x<stake>`, where `<stake>` is either `ReturnStakes` (the stakes should be returned; useful in case of Tie/Draw), or `Win` (the user get the entire pot, i.e., all the stakes), or `%<percentage>` (e.g., `%30` means the user gets `%30` percents of the pot), or a specific stake (e.g., `1:70,2:30`. See the input parameter `stake`)




=== Keep alive ===
To make communication between the server and the script more efficient, 
the gaming server keeps the connection alive as long as an ongoing games exist.

Our server uses pipelining, i.e., several GET requests may be sent to the script even before the script sent its first response.
See http://www.mozilla.org/projects/netlib/http/pipelining-faq.html

Make sure your server supports "HTTP Keep-Alives".
In IIS 6.0, HTTP Keep-Alives are enabled by default, which complies with the HTTP/1.1 specification for HTTP Keep-Alives. 
IIS holds open an inactive connection for as long as the ConnectionTimeout metabase property specifies (the default value is 120 seconds).

To know how to seperate between the GET responses, we use this header:
{{{
Content-Length: ...
}}}
Therefore, make sure your script returns this header correctly by using buffering 
(i.e., your script should buffer its response, and send the response only when it is complete.)
It is done as follows in various scripting languages:
{{{
ASP: Response.Buffer = true
ASP.Net: Page.Response.BufferOutput = true
PHP: ob_start()
JSP: <%@ page autoFlush="false" buffer="50kb" ... %>    Make sure your buffer is big enough (otherwise, an exception will be raised when the buffer overflows)
Python, Perl: plug in a StringIO instance on sys.stdout, or use cgi_buffer.py
}}}

=== Stateless ===
Note that the script should be stateless.
E.g., in ASP, you should not use (or disable) session, cookies or application.
If you want to be absolutely sure that you script does not use cookies, you can disable cookies completely.
You can disable cookies in IIS like this:
{{{
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters\AllowSessionState
}}}


=== Character encoding ===
The default encoding that our server assumes is ISO-8859-1
(HTTP 1.1 says that the default charset is ISO-8859-1)
Because the entire output is url-encoded, the encoding doesn't matter.
However, in case of errors, your script might produce illegal output that is not url-encoded,
and you should make sure the encoding is ISO-8859-1, i.e., make sure you have the header:
Content-Type: text/html; charset=ISO-8859-1
This can be done in this way:
{{{
Java Servlets: resource.setContentType ("text/html;charset=ISO-8859-1");
JSP: <%@ page contentType="text/html; charset=ISO-8859-1" %>
ASP and ASP.Net: <%@ Language="VBScript" codepage=1252 %><%Response.charset="ISO-8859-1"%>
PHP: header('Content-type: text/html; charset=ISO-8859-1');
Perl and Python: print "Content-Type: text/html; charset=ISO-8859-1\n\n"
}}}

=== Authentication ===
The gaming server add an `md5` signature to every GET request, so your script can verify that a certain request came from the server.
The parameter `md5` is equal to:
{{{
MD5( md5_secret + milli_time_stamp )
}}}
The `md5_secret` is different for each game, and can be found online in the [Come2Play] website; it is a secret shared between the server and the script.
Remember that the script is stateless, and therefore imposters cannot cause any harm 
except wasting the script time and perhaps causing a denial-of-service attack.

For example, for TicTacToe in the url below:
{{{
TicTacToeGameLogic.asp?milli_time_stamp=1199367696671&...&md5=8cbe04852672a2210df30a87d6b3ef25
md5_secret = "mxgyhs5238fjhsrqofksy6er45p"
MD5("mxgyhs5238fjhsrqofksy6er45p1199367696671") = "8cbe04852672a2210df30a87d6b3ef25"
}}}

== Example of TicTacToe game ==
A move in TicTacToe occurs when a player selects a cell, e.g., the cell in row 0 and column 2, which is encoded as `0X2`.
The board is encoded as a string of length 9, each character describes the state of a cell: each cell can be Empty (`E`), White (`W`), or Black (`B`).
For example, this string "EEWBEEEEW" describes this board:
{{{
-------
| | |W|
-------
|B| | |
-------
| | |W|
-------
}}}
And the string "EEEEEEEEE" describes the empty board.

The state of a match in a *single-player* game is:
`<USER_ID>x<BOARD_STATE>`. (In a single-player TicTacToe game, a single player plays both white and black.)
For example, "55xEEEEEEEEE" represents a single-player match where the player is 55, and the board is empty. 

The state of a match in a *two-player* game is:
`<WHITE_USER_ID>x<BLACK_USER_ID>x<BOARD_STATE>`.
For example, "55x66xEEEEEEEEE" represents a match where the white player is 55, the black is 66, and the board is empty. 

For example, consider the following operations for the TicTacToe two-player game:
(on the Come2Play server the link is: http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp)

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55x66 Starting a new game]
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55x66
< turn_of=55&new_game_state=55x66xEEEEEEEEE&msg_to_all=55x66xEEEEEEEEE&msg_to_new_viewer=55x66xEEEEEEEEE&milli_time_stamp=123
}}}
The empty board is broadcasted to all players and viewers.
User 55 will have a timer of 100 seconds to complete his move.


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xEEWBEEEEW  Loading a saved game]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xEEWBEEEEW
< turn_of=66&new_game_state=55x66xEEWBEEEEW&msg_to_all=55x66xEEWBEEEEW&msg_to_new_viewer=55x66xEEWBEEEEW&milli_time_stamp=123
}}}

This saved game is broadcasted to all players and viewers.
User 66 will have a timer of 70 seconds to complete his move.


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xWWEWEEBBB Loading a saved game that already ended]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=66x55&old_game_state=55x66xWWEWEEBBB
< new_game_state=55x66xWWEWEEBBB&match_result_66=1xWIN&match_result_55=-1x0&msg_to_all=55x66xWWEWEEBBB&milli_time_stamp=123
}}}


[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=1X2&old_game_state=55x66xEEWBEEEEW&stakes=10   Making a move, afterwhich the game is still in progress]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=1X2&old_game_state=55x66xEEWBEEEEW&stakes=10
< turn_of=55&new_game_state=55x66xEEWBEBEEW&msg_to_new_viewer=55x66xEEWBEBEEW&msg_to_55=1X2&msg_to_viewer=1X2&milli_time_stamp=123
}}}

The black chose the cell 1X2 , and this is the new game state:
{{{
-------
| | |W|
-------
|B| |B|
-------
| | |W|
-------
}}}
This move is sent to user 55 (white player) and any viewer.
A new viewer that might join the game in this stage will get this match state "55x66xEEWBEBEEW".
User 55 will have a timer of 60 seconds to complete his move.

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=55&msg=0X2&old_game_state=55x66xWBEWBBBWW&stakes=9  Making a move, afterwhich the game ends in tie]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=55&msg=0X2&old_game_state=55x66xWBEWBBBWW&stakes=9
< new_game_state=55x66xWBWWBBBWW&match_result_55=0xReturnStakes&match_result_66=0xReturnStakes&msg_to_66=0X2&msg_to_viewer=0X2&milli_time_stamp=123
}}}

The white chose the cell 0X2 , and this is the new game state:
{{{
-------
|W|B|W|
-------
|W|B|B|
-------
|B|W|W|
-------
}}}

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=2X2&old_game_state=55x66xWWEWEEBBE&stakes=9 Making a move, afterwhich the game ends in black winning]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=66x55&from_user_id=66&msg=2X2&old_game_state=55x66xWWEWEEBBE&stakes=9
< new_game_state=55x66xWWEWEEBBB&match_result_66=1x9&match_result_55=-1x0&msg_to_55=2X2&msg_to_viewer=2X2&milli_time_stamp=123
}}}

[http://www.come2play.com/Shared/java_calls/api/TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=keep_alive   Keeping the connection alive]:
{{{
> TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=keep_alive
< milli_time_stamp=123
}}}


For single-player TicTacToe:
{{{
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=new_game&playing_user_ids=55
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=55&old_game_state=55xEEWBEEEEW
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=load_game&playing_user_ids=55&old_game_state=55xWWEWEEBBB
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=1X2&old_game_state=55xEEWBEEEEW&stakes=10
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=0X2&old_game_state=55xWBEWBBBWW&stakes=9
TicTacToeGameLogic.asp?milli_time_stamp=123&msg_type=made_move&playing_user_ids=55&from_user_id=55&msg=2X2&old_game_state=55xWWEWEEBBE&stakes=9
}}}