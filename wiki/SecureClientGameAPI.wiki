#summary A secure multiplayer API

This API is a secure variant of [ClientGameAPI],
where in addition to the players there is another program called a _juror_
that decides the game outcome (i.e., who is the winner).

Each flash SWF file is either a user (a player/viewer with a `user_id>0`) or a juror (with `user_id=-1`).

The following functions are applicable both for users and jurors, and have the same semantics as in [ClientGameAPI]:
{{{
got_my_user_id
got_general_info
got_user_info
got_match_started
got_match_over
got_start_turn_of
got_end_turn_of
do_send_message
got_message
do_set_timer
got_timer
}}}

The following functions were removed from [ClientGameAPI]:
{{{
do_agree_on_match_over
do_client_protocol_error_with_description
do_start_my_turn
do_end_my_turn
do_store_match_state
}}}
Note that the players no longer handle ending the match 
or deciding on who has the turn.
The _juror_ is now in charge of these.

These are the new additions to SecureClientGameAPI:
{{{
do_juror_store_match_state(key:String, value:Object, secret_level:int, for_user_id:int)
do_user_store_match_state (key:String, value:Object, secret_level:int)
got_secure_stored_match_state(user_ids:int[], keys:String[], values:Object[], secret_levels:int[])

do_juror_unfold_top_secret(key:String, to_user_id:int)
do_juror_reorder_top_secret(keys:String[])

do_juror_set_turn(turn_of_player_id:int)
do_juror_end_match(finished_player_ids:int[], scores:int[], pot_percentages:int[])
}}}

Similarly to `do_store_match_state` in [ClientGameAPI],
the server maintains a memory, that is a mapping from keys to values.

`secret_level` is either `PUBLIC=0`, `SECRET=1`, or `TOPSECRET=2`.
