#summary Match state in SecureClientGameAPI

These 5 functions handle the match state:
{{{
do_juror_store_match_state(key:String, value:Object, secret_level:int, for_user_id:int)
do_user_store_match_state (key:String, value:Object, secret_level:int)
got_secure_stored_match_state(user_ids:Array/*int*/, keys:Array/*String*/, values:Array/*Object*/, secret_levels:Array/*int*/)

do_juror_unfold_match_state(key:String, to_user_id:int)
do_juror_shuffle_match_state(keys:Array/*String*/)
}}}


The first two functions sets values in the match state,
in a similar way to [do_store_match_state] in [ClientGameAPI].
`do_juror_store_match_state` is called by the juror,
and `do_user_store_match_state` by the user.
`got_secure_stored_match_state` is called on both users and jurors.

The server maintains a memory, that is a mapping from keys to values,
in addition to some extra information for each key (such as user_id, secret_level, and authorized_user_ids).
`secret_level` is either `PUBLIC=0`, `SECRET=1`, or `TOPSECRET=2`.

`PUBLIC` memory is available to everyone, e.g., the state of a TicTacToe board.
`SECRET` memory is used to pass information to the jurors (the other players don't see the values written to `SECRET` memory, e.g., the positions of suspected mines in a multiplayer minesweeper game.
Finally, `TOPSECRET` is used to hide information from everyone (even from jurors!) and to reveal it only when all the jurors unanimously decide to do so, e.g., your hand in a poker game or the dominoe pieces in your hand.
(You can read more about the risk of secrecy theft by jurors in [http://multiplayer-api.googlecode.com/files/SecureClientGameAPI_version1.pdf this paper].)


Formally, the memory is a dictionary denoted `MATCH_STATE` that maps
each `key` to an object with fields `user_id`,`value`,`secret_level`, and `authorized_user_ids`:
{{{
MATCH_STATE[key] = {user_id:int, value:Object, secret_level:int, authorized_user_ids:Array/*int*/}
}}}
`user_id` may be -1 for jurors.
`value` is an arbitrary object.
`authorized_user_ids` is used only for `TOPSECRET` memory. 
Users in `authorized_user_ids` will get the `value` 
when the server calls `got_secure_stored_match_state` 
(Other users will get a `null` value) 

Next we will explain what the server does for each operation.

{{{
do_user_store_match_state (key:String, value:Object, secret_level:int)
DOES:
MATCH_STATE[key] = {my_user_id,  value,   secret_level,  secret_level==TOPSECRET ? [my_user_id] : [] }
}}}
With similar restrictions on viewers like in [do_store_match_state] 


{{{
do_juror_store_match_state(key:String, value:Object, secret_level:int, for_user_id:int)
DOES:
MATCH_STATE[key] = { for_user_id ,  value,   secret_level,  [] }
}}}

{{{
got_secure_stored_match_state(user_ids:Array/*int*/, keys:Array/*String*/, values:Array/*Object*/, secret_levels:Array/*int*/)
}}}
Whenever a user or juror updates `MATCH_STATE`, then all users and jurors get the callback
   `got_secure_stored_match_state`.
_However_, some of them will get `null` values (instead of the real `value` that was written),
according to the rule below.

Consider an entry  
{{{
MATCH_STATE[key] = {user_id:int, value:Object, secret_level:int, authorized_user_ids:Array/*int*/}
}}}
that is sent to user `my_user_id`.
Then, the value will *not* be `null` if and only if:
 * `secret_level` is `PUBLIC`, or
 * `secret_level` is `SECRET`   and  (`my_user_id==-1` or `my_user_id==user_id`), or
 * `secret_level` is `TOPSECRET`  and  (`my_user_id` is in  `authorized_user_ids`).


{{{
do_juror_unfold_match_state(key:String, to_user_id:int)
DOES:
MATCH_STATE[key].authorized_user_ids.push(to_user_id)
}}}
The server will also call `got_secure_stored_match_state`  for user `to_user_id`.


{{{
do_juror_shuffle_match_state(keys:Array/*String*/)
DOES:
shuffle(MATCH_STATE[keys[0]], MATCH_STATE[keys[1]], ...)
}}}
In other words, the server randomly shuffles or reorders the dictionary contents of the given `keys`.
The server checks that the keys indeed contain values (i.e., that someone stored values in those keys); a juror cannot shuffle keys that are not in `MATCH_STATE`.

