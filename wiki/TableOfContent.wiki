#summary Table of contents: Multiplayer API, emulator, and tutorials

This wiki contains documentation about the Multiplayer API, the emulator, and tutorials for creating multiplayer games in flash.
This project main target audience is game developers that wish to create new multiplayer flash games, or to convert single-player flash games to multiplayer.
Make sure you read the [index] page that contains general info, target audience, mailing lists, licensing comments, 

= Multiplayer API =
The Multiplayer API is a set of APIs to develop multiplayer flash games.
Each API is a set of functions in actionscript (AS) that communicate using LocalConnection with a container that should communicate these operations to a multiplayer server. 
The resulting game is a SWF file, written either in actionscript2 (AS2) or actionscript3 (AS3), published for flash version 8 or higher.


=== Multiplayer APIs ===
The Multiplayer API is composed of 3 APIs:
  * [ClientGameAPI] - for developing games using only client-side code.
  * [ScriptGameAPI] - uses both client-side and server-side code.
  * [ConnectedGameAPI] - for converting single-player games to multiplayer.

You should write a class that extends one of the above APIs,
and when your SWF is loaded, it should create one instance of that class.

[MultiplayerAPI_Implementation The Multiplayer API Implementation] describes the internal implementation that uses LocalConnection. The implementation details should not concern game developers, but they are important for websites hosting the games.

You may either test the games in the [Emulator], or submit your game online to a gaming website that supports this API. One such website is [http://www.come2play.com Come2Play].
The current version of the [Emulator] only supports [ClientGameAPI].
Coming soon (TODO): In the near future the [Emulator] will support [ScriptGameAPI] and [ConnectedGameAPI].

[ClientGameAPI] uses only client-side code, and therefore hackers (black-hat players) may be able to send illegal messages to other players
and create a protocol error (see @do_client_protocol_error_with_description).
In case of a protocol error, the game is canceled and the original stakes are returned to all players.

[ScriptGameAPI] also uses server-side code, in contrast to [ClientGameAPI] that uses only client-side.
If security is critical in your game, consider using ScriptGameAPI instead.
You will need access to a server that can run server-side logic in a language such as ASP, PHP, Perl, or Java. 

=== AS2 vs AS3 ===
Although AS2 and AS3 have major differences, we tried to abstract away these differences by hiding them behind a LocalConnection and using almost identical signatures for the class ClientGameAPI.
The only difference in the signatures between the AS2 and AS3 versions, is that the type `Number` in AS2 was changed into `int` in AS3, and `void` to `Void`.
The remainder of this wiki describes the AS3 version.
We recommend using AS3 because it is more stable, fast, and easier to debug.

=== FPS ===
Frame per seconds (FPS):
Your game may run in any fps you may choose.
We recommend using less than 40 fps to avoid overloading slow computers.

=== obfuscate ===
We suggest that you encrypt/obfuscate your code to make it difficult for users to crack or steal your code.
There are many programs for that purpose, one of them is Amayeta (http://www.amayeta.com/). 



= Emulator =
When developing your game, you should use the [Emulator].
After you finished testing in the emulator, you may submit the game to any company that endorse this multiplayer API.
One such company is [http://www.come2play.com Come2Play].

[Online_vs_Emulator Online testing vs the Emulator] discusses the differences you may find between the emulator and the online version, and common pitfalls.

Coming soon (TODO): a video showing how to use the emulator.

= Creating multiplayer games =
Coming soon (TODO): this section will contain tutorials on creating both turn-based and real-time games.