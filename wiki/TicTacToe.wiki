#summary The classic example of a turn-based game

In the SVN you can see an implementation of TicTacToe in the AS3 directory.
This page explains on some of the details of this implementation.


The first step is to create an instance of a class that extends [ClientGameAPI]:
{{{
class TicTacToe_API extends ClientGameAPI {...}
api = new TicTacToe_API(this);
}}}

Next I will describe all the operations (`do_*`) and callbacks (`got_*`) used
in the `TicTacToe_API` class.

The first operation you must call is [do_register_on_server], after finishing the initialization: 
{{{
do_register_on_server();
}}}

When a user make a move, we update the "match state" on the server by calling [do_store_match_state]. This will both broadcast the new match state to all existing players and viewers, and also to future new viewers (see [got_stored_match_state] below):
{{{
do_store_match_state("square"+i+j, {x:i,y:j,state:currTurn});
}}}

When we get a new move, we check if the game ended, and if so we call [do_agree_on_match_over]. Note that all players call it with the same parameters.
{{{
do_agree_on_match_over(aPlayers, ...);
}}}

TicTacToe is a turn-based game, i.e., a single user has the current turn. 
We set the turn ([do_start_my_turn]) in two occasions: (i) When the match starts (in got_stored_match_state if the state is empty), and (ii) when the opponent turn ended (in got_end_turn_of if the game did not end):
{{{
do_start_my_turn();
}}}
The turn is ended ([do_end_my_turn]) after the user selected his move:
{{{
do_end_my_turn([aPlayers[1-iColor]]);	
}}}

We check for various protocol errors in the code, and cancel the game if an error occured, e.g.:
{{{
do_client_protocol_error_with_description("X is out of range");
}}}

These are the callbacks the class handles:
|| *callback* || *Explanation* ||
|| [got_general_info] || We load the logo (the key `logo_swf_full_url`) and display it inside the squares ||
|| [got_my_user_id] || We save my user_id ||
|| [got_match_started] ||  We clean up variables and graphics ||
|| [got_stored_match_state] ||  We fill up the state variables and update the graphics. It is called when the opponent made a move, or a new/load game started ||
|| [got_match_over] ||  We disable the option to make a move||
|| [got_start_turn_of] ||  If it is my turn, then we enable the option to make a move ||
|| [got_end_turn_of] || If the opponent turn ended, then I start my own move ||
|| [got_error] || We cancel the game by calling [do_client_protocol_error_with_description] ||