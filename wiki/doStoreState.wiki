#summary Call it to store/update/delete you match state

{{{
doStoreState(userEntries:Array/*UserEntry*/)
}}}

=== Description ===

Use this function to store the match state on the server.
Both players and viewers can store match state, and only when the match is in progress.
However, a viewer cannot override a stored `key`, whereas players can use the same key-space.
When the match ends, the state is cleared.

This function will trigger a [gotStateChanged]

For more information about storing information go to [MatchState].

=== Parameters ===

userEntries - an Array of [UserEntry] elements to be stored on the server.


=== Triggered gotStateChange on users ===

An array of [ServerEntry] elements, each representing a [UserEntry] stored,
all with storedByUserId with the id of the storing user.
with either the stored value, or null if the value is Secret

=== Example ===

player 1 stores are secret number on user input

{{{

public function onUserInput(num:int):void
{
	var keyObj:Object = new Object();
	keyObj.userId = myUserId;
	keyObj.type = "number";
	var userEntry:UserEntry = UserEntry.create(keyObj,num,false);
	var userEntries:Arrat = new Array();
	userEntries.push(userEntry);
	doStoreState(userEntries);
}


override public function gotStateChanged(serverEntries:Array):void
{
	var serverEntry:ServerEntry = serverEntries[0];
	if(serverEntry.type == "number")
	{
		if (serverEntry.storedByUserId != serverEntry.key.userId) doAllFoundHacker(serverEntry.storedByUserId,"player tried to store a value on someone else's key");
		trace("player " + serverEntry.key.userId + " typed "+serverEntry.value);
	
	}
	
}

}}}
